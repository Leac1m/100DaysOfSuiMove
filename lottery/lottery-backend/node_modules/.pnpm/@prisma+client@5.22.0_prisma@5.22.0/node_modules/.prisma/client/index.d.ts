
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model GameCreated
 * 
 */
export type GameCreated = $Result.DefaultSelection<Prisma.$GameCreatedPayload>
/**
 * Model RewardChaimed
 * 
 */
export type RewardChaimed = $Result.DefaultSelection<Prisma.$RewardChaimedPayload>
/**
 * Model TicketDestroyed
 * 
 */
export type TicketDestroyed = $Result.DefaultSelection<Prisma.$TicketDestroyedPayload>
/**
 * Model TicketPurchase
 * 
 */
export type TicketPurchase = $Result.DefaultSelection<Prisma.$TicketPurchasePayload>
/**
 * Model WinnerDetermined
 * 
 */
export type WinnerDetermined = $Result.DefaultSelection<Prisma.$WinnerDeterminedPayload>
/**
 * Model cursor
 * 
 */
export type cursor = $Result.DefaultSelection<Prisma.$cursorPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more GameCreateds
 * const gameCreateds = await prisma.gameCreated.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more GameCreateds
   * const gameCreateds = await prisma.gameCreated.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.gameCreated`: Exposes CRUD operations for the **GameCreated** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameCreateds
    * const gameCreateds = await prisma.gameCreated.findMany()
    * ```
    */
  get gameCreated(): Prisma.GameCreatedDelegate<ExtArgs>;

  /**
   * `prisma.rewardChaimed`: Exposes CRUD operations for the **RewardChaimed** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RewardChaimeds
    * const rewardChaimeds = await prisma.rewardChaimed.findMany()
    * ```
    */
  get rewardChaimed(): Prisma.RewardChaimedDelegate<ExtArgs>;

  /**
   * `prisma.ticketDestroyed`: Exposes CRUD operations for the **TicketDestroyed** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TicketDestroyeds
    * const ticketDestroyeds = await prisma.ticketDestroyed.findMany()
    * ```
    */
  get ticketDestroyed(): Prisma.TicketDestroyedDelegate<ExtArgs>;

  /**
   * `prisma.ticketPurchase`: Exposes CRUD operations for the **TicketPurchase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TicketPurchases
    * const ticketPurchases = await prisma.ticketPurchase.findMany()
    * ```
    */
  get ticketPurchase(): Prisma.TicketPurchaseDelegate<ExtArgs>;

  /**
   * `prisma.winnerDetermined`: Exposes CRUD operations for the **WinnerDetermined** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WinnerDetermineds
    * const winnerDetermineds = await prisma.winnerDetermined.findMany()
    * ```
    */
  get winnerDetermined(): Prisma.WinnerDeterminedDelegate<ExtArgs>;

  /**
   * `prisma.cursor`: Exposes CRUD operations for the **cursor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cursors
    * const cursors = await prisma.cursor.findMany()
    * ```
    */
  get cursor(): Prisma.cursorDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    GameCreated: 'GameCreated',
    RewardChaimed: 'RewardChaimed',
    TicketDestroyed: 'TicketDestroyed',
    TicketPurchase: 'TicketPurchase',
    WinnerDetermined: 'WinnerDetermined',
    cursor: 'cursor'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "gameCreated" | "rewardChaimed" | "ticketDestroyed" | "ticketPurchase" | "winnerDetermined" | "cursor"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      GameCreated: {
        payload: Prisma.$GameCreatedPayload<ExtArgs>
        fields: Prisma.GameCreatedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameCreatedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCreatedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameCreatedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCreatedPayload>
          }
          findFirst: {
            args: Prisma.GameCreatedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCreatedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameCreatedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCreatedPayload>
          }
          findMany: {
            args: Prisma.GameCreatedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCreatedPayload>[]
          }
          create: {
            args: Prisma.GameCreatedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCreatedPayload>
          }
          createMany: {
            args: Prisma.GameCreatedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreatedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCreatedPayload>[]
          }
          delete: {
            args: Prisma.GameCreatedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCreatedPayload>
          }
          update: {
            args: Prisma.GameCreatedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCreatedPayload>
          }
          deleteMany: {
            args: Prisma.GameCreatedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameCreatedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GameCreatedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCreatedPayload>
          }
          aggregate: {
            args: Prisma.GameCreatedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameCreated>
          }
          groupBy: {
            args: Prisma.GameCreatedGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameCreatedGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCreatedCountArgs<ExtArgs>
            result: $Utils.Optional<GameCreatedCountAggregateOutputType> | number
          }
        }
      }
      RewardChaimed: {
        payload: Prisma.$RewardChaimedPayload<ExtArgs>
        fields: Prisma.RewardChaimedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RewardChaimedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardChaimedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RewardChaimedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardChaimedPayload>
          }
          findFirst: {
            args: Prisma.RewardChaimedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardChaimedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RewardChaimedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardChaimedPayload>
          }
          findMany: {
            args: Prisma.RewardChaimedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardChaimedPayload>[]
          }
          create: {
            args: Prisma.RewardChaimedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardChaimedPayload>
          }
          createMany: {
            args: Prisma.RewardChaimedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RewardChaimedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardChaimedPayload>[]
          }
          delete: {
            args: Prisma.RewardChaimedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardChaimedPayload>
          }
          update: {
            args: Prisma.RewardChaimedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardChaimedPayload>
          }
          deleteMany: {
            args: Prisma.RewardChaimedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RewardChaimedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RewardChaimedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardChaimedPayload>
          }
          aggregate: {
            args: Prisma.RewardChaimedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRewardChaimed>
          }
          groupBy: {
            args: Prisma.RewardChaimedGroupByArgs<ExtArgs>
            result: $Utils.Optional<RewardChaimedGroupByOutputType>[]
          }
          count: {
            args: Prisma.RewardChaimedCountArgs<ExtArgs>
            result: $Utils.Optional<RewardChaimedCountAggregateOutputType> | number
          }
        }
      }
      TicketDestroyed: {
        payload: Prisma.$TicketDestroyedPayload<ExtArgs>
        fields: Prisma.TicketDestroyedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketDestroyedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketDestroyedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketDestroyedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketDestroyedPayload>
          }
          findFirst: {
            args: Prisma.TicketDestroyedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketDestroyedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketDestroyedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketDestroyedPayload>
          }
          findMany: {
            args: Prisma.TicketDestroyedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketDestroyedPayload>[]
          }
          create: {
            args: Prisma.TicketDestroyedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketDestroyedPayload>
          }
          createMany: {
            args: Prisma.TicketDestroyedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TicketDestroyedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketDestroyedPayload>[]
          }
          delete: {
            args: Prisma.TicketDestroyedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketDestroyedPayload>
          }
          update: {
            args: Prisma.TicketDestroyedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketDestroyedPayload>
          }
          deleteMany: {
            args: Prisma.TicketDestroyedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketDestroyedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TicketDestroyedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketDestroyedPayload>
          }
          aggregate: {
            args: Prisma.TicketDestroyedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicketDestroyed>
          }
          groupBy: {
            args: Prisma.TicketDestroyedGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketDestroyedGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketDestroyedCountArgs<ExtArgs>
            result: $Utils.Optional<TicketDestroyedCountAggregateOutputType> | number
          }
        }
      }
      TicketPurchase: {
        payload: Prisma.$TicketPurchasePayload<ExtArgs>
        fields: Prisma.TicketPurchaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketPurchaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPurchasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketPurchaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPurchasePayload>
          }
          findFirst: {
            args: Prisma.TicketPurchaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPurchasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketPurchaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPurchasePayload>
          }
          findMany: {
            args: Prisma.TicketPurchaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPurchasePayload>[]
          }
          create: {
            args: Prisma.TicketPurchaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPurchasePayload>
          }
          createMany: {
            args: Prisma.TicketPurchaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TicketPurchaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPurchasePayload>[]
          }
          delete: {
            args: Prisma.TicketPurchaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPurchasePayload>
          }
          update: {
            args: Prisma.TicketPurchaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPurchasePayload>
          }
          deleteMany: {
            args: Prisma.TicketPurchaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketPurchaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TicketPurchaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPurchasePayload>
          }
          aggregate: {
            args: Prisma.TicketPurchaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicketPurchase>
          }
          groupBy: {
            args: Prisma.TicketPurchaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketPurchaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketPurchaseCountArgs<ExtArgs>
            result: $Utils.Optional<TicketPurchaseCountAggregateOutputType> | number
          }
        }
      }
      WinnerDetermined: {
        payload: Prisma.$WinnerDeterminedPayload<ExtArgs>
        fields: Prisma.WinnerDeterminedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WinnerDeterminedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerDeterminedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WinnerDeterminedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerDeterminedPayload>
          }
          findFirst: {
            args: Prisma.WinnerDeterminedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerDeterminedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WinnerDeterminedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerDeterminedPayload>
          }
          findMany: {
            args: Prisma.WinnerDeterminedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerDeterminedPayload>[]
          }
          create: {
            args: Prisma.WinnerDeterminedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerDeterminedPayload>
          }
          createMany: {
            args: Prisma.WinnerDeterminedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WinnerDeterminedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerDeterminedPayload>[]
          }
          delete: {
            args: Prisma.WinnerDeterminedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerDeterminedPayload>
          }
          update: {
            args: Prisma.WinnerDeterminedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerDeterminedPayload>
          }
          deleteMany: {
            args: Prisma.WinnerDeterminedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WinnerDeterminedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WinnerDeterminedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinnerDeterminedPayload>
          }
          aggregate: {
            args: Prisma.WinnerDeterminedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWinnerDetermined>
          }
          groupBy: {
            args: Prisma.WinnerDeterminedGroupByArgs<ExtArgs>
            result: $Utils.Optional<WinnerDeterminedGroupByOutputType>[]
          }
          count: {
            args: Prisma.WinnerDeterminedCountArgs<ExtArgs>
            result: $Utils.Optional<WinnerDeterminedCountAggregateOutputType> | number
          }
        }
      }
      cursor: {
        payload: Prisma.$cursorPayload<ExtArgs>
        fields: Prisma.cursorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cursorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cursorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cursorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cursorPayload>
          }
          findFirst: {
            args: Prisma.cursorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cursorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cursorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cursorPayload>
          }
          findMany: {
            args: Prisma.cursorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cursorPayload>[]
          }
          create: {
            args: Prisma.cursorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cursorPayload>
          }
          createMany: {
            args: Prisma.cursorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.cursorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cursorPayload>[]
          }
          delete: {
            args: Prisma.cursorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cursorPayload>
          }
          update: {
            args: Prisma.cursorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cursorPayload>
          }
          deleteMany: {
            args: Prisma.cursorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.cursorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.cursorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cursorPayload>
          }
          aggregate: {
            args: Prisma.CursorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCursor>
          }
          groupBy: {
            args: Prisma.cursorGroupByArgs<ExtArgs>
            result: $Utils.Optional<CursorGroupByOutputType>[]
          }
          count: {
            args: Prisma.cursorCountArgs<ExtArgs>
            result: $Utils.Optional<CursorCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model GameCreated
   */

  export type AggregateGameCreated = {
    _count: GameCreatedCountAggregateOutputType | null
    _min: GameCreatedMinAggregateOutputType | null
    _max: GameCreatedMaxAggregateOutputType | null
  }

  export type GameCreatedMinAggregateOutputType = {
    dbId: string | null
    game_id: string | null
    name: string | null
    cost_in_sui: string | null
    end_time: string | null
  }

  export type GameCreatedMaxAggregateOutputType = {
    dbId: string | null
    game_id: string | null
    name: string | null
    cost_in_sui: string | null
    end_time: string | null
  }

  export type GameCreatedCountAggregateOutputType = {
    dbId: number
    game_id: number
    name: number
    cost_in_sui: number
    end_time: number
    _all: number
  }


  export type GameCreatedMinAggregateInputType = {
    dbId?: true
    game_id?: true
    name?: true
    cost_in_sui?: true
    end_time?: true
  }

  export type GameCreatedMaxAggregateInputType = {
    dbId?: true
    game_id?: true
    name?: true
    cost_in_sui?: true
    end_time?: true
  }

  export type GameCreatedCountAggregateInputType = {
    dbId?: true
    game_id?: true
    name?: true
    cost_in_sui?: true
    end_time?: true
    _all?: true
  }

  export type GameCreatedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameCreated to aggregate.
     */
    where?: GameCreatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameCreateds to fetch.
     */
    orderBy?: GameCreatedOrderByWithRelationInput | GameCreatedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameCreatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameCreateds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameCreateds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameCreateds
    **/
    _count?: true | GameCreatedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameCreatedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameCreatedMaxAggregateInputType
  }

  export type GetGameCreatedAggregateType<T extends GameCreatedAggregateArgs> = {
        [P in keyof T & keyof AggregateGameCreated]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameCreated[P]>
      : GetScalarType<T[P], AggregateGameCreated[P]>
  }




  export type GameCreatedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameCreatedWhereInput
    orderBy?: GameCreatedOrderByWithAggregationInput | GameCreatedOrderByWithAggregationInput[]
    by: GameCreatedScalarFieldEnum[] | GameCreatedScalarFieldEnum
    having?: GameCreatedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCreatedCountAggregateInputType | true
    _min?: GameCreatedMinAggregateInputType
    _max?: GameCreatedMaxAggregateInputType
  }

  export type GameCreatedGroupByOutputType = {
    dbId: string
    game_id: string
    name: string
    cost_in_sui: string
    end_time: string
    _count: GameCreatedCountAggregateOutputType | null
    _min: GameCreatedMinAggregateOutputType | null
    _max: GameCreatedMaxAggregateOutputType | null
  }

  type GetGameCreatedGroupByPayload<T extends GameCreatedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameCreatedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameCreatedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameCreatedGroupByOutputType[P]>
            : GetScalarType<T[P], GameCreatedGroupByOutputType[P]>
        }
      >
    >


  export type GameCreatedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dbId?: boolean
    game_id?: boolean
    name?: boolean
    cost_in_sui?: boolean
    end_time?: boolean
  }, ExtArgs["result"]["gameCreated"]>

  export type GameCreatedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dbId?: boolean
    game_id?: boolean
    name?: boolean
    cost_in_sui?: boolean
    end_time?: boolean
  }, ExtArgs["result"]["gameCreated"]>

  export type GameCreatedSelectScalar = {
    dbId?: boolean
    game_id?: boolean
    name?: boolean
    cost_in_sui?: boolean
    end_time?: boolean
  }


  export type $GameCreatedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameCreated"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      dbId: string
      game_id: string
      name: string
      cost_in_sui: string
      end_time: string
    }, ExtArgs["result"]["gameCreated"]>
    composites: {}
  }

  type GameCreatedGetPayload<S extends boolean | null | undefined | GameCreatedDefaultArgs> = $Result.GetResult<Prisma.$GameCreatedPayload, S>

  type GameCreatedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GameCreatedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GameCreatedCountAggregateInputType | true
    }

  export interface GameCreatedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameCreated'], meta: { name: 'GameCreated' } }
    /**
     * Find zero or one GameCreated that matches the filter.
     * @param {GameCreatedFindUniqueArgs} args - Arguments to find a GameCreated
     * @example
     * // Get one GameCreated
     * const gameCreated = await prisma.gameCreated.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameCreatedFindUniqueArgs>(args: SelectSubset<T, GameCreatedFindUniqueArgs<ExtArgs>>): Prisma__GameCreatedClient<$Result.GetResult<Prisma.$GameCreatedPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GameCreated that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GameCreatedFindUniqueOrThrowArgs} args - Arguments to find a GameCreated
     * @example
     * // Get one GameCreated
     * const gameCreated = await prisma.gameCreated.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameCreatedFindUniqueOrThrowArgs>(args: SelectSubset<T, GameCreatedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameCreatedClient<$Result.GetResult<Prisma.$GameCreatedPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GameCreated that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCreatedFindFirstArgs} args - Arguments to find a GameCreated
     * @example
     * // Get one GameCreated
     * const gameCreated = await prisma.gameCreated.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameCreatedFindFirstArgs>(args?: SelectSubset<T, GameCreatedFindFirstArgs<ExtArgs>>): Prisma__GameCreatedClient<$Result.GetResult<Prisma.$GameCreatedPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GameCreated that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCreatedFindFirstOrThrowArgs} args - Arguments to find a GameCreated
     * @example
     * // Get one GameCreated
     * const gameCreated = await prisma.gameCreated.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameCreatedFindFirstOrThrowArgs>(args?: SelectSubset<T, GameCreatedFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameCreatedClient<$Result.GetResult<Prisma.$GameCreatedPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GameCreateds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCreatedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameCreateds
     * const gameCreateds = await prisma.gameCreated.findMany()
     * 
     * // Get first 10 GameCreateds
     * const gameCreateds = await prisma.gameCreated.findMany({ take: 10 })
     * 
     * // Only select the `dbId`
     * const gameCreatedWithDbIdOnly = await prisma.gameCreated.findMany({ select: { dbId: true } })
     * 
     */
    findMany<T extends GameCreatedFindManyArgs>(args?: SelectSubset<T, GameCreatedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameCreatedPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GameCreated.
     * @param {GameCreatedCreateArgs} args - Arguments to create a GameCreated.
     * @example
     * // Create one GameCreated
     * const GameCreated = await prisma.gameCreated.create({
     *   data: {
     *     // ... data to create a GameCreated
     *   }
     * })
     * 
     */
    create<T extends GameCreatedCreateArgs>(args: SelectSubset<T, GameCreatedCreateArgs<ExtArgs>>): Prisma__GameCreatedClient<$Result.GetResult<Prisma.$GameCreatedPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GameCreateds.
     * @param {GameCreatedCreateManyArgs} args - Arguments to create many GameCreateds.
     * @example
     * // Create many GameCreateds
     * const gameCreated = await prisma.gameCreated.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreatedCreateManyArgs>(args?: SelectSubset<T, GameCreatedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameCreateds and returns the data saved in the database.
     * @param {GameCreatedCreateManyAndReturnArgs} args - Arguments to create many GameCreateds.
     * @example
     * // Create many GameCreateds
     * const gameCreated = await prisma.gameCreated.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameCreateds and only return the `dbId`
     * const gameCreatedWithDbIdOnly = await prisma.gameCreated.createManyAndReturn({ 
     *   select: { dbId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreatedCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreatedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameCreatedPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GameCreated.
     * @param {GameCreatedDeleteArgs} args - Arguments to delete one GameCreated.
     * @example
     * // Delete one GameCreated
     * const GameCreated = await prisma.gameCreated.delete({
     *   where: {
     *     // ... filter to delete one GameCreated
     *   }
     * })
     * 
     */
    delete<T extends GameCreatedDeleteArgs>(args: SelectSubset<T, GameCreatedDeleteArgs<ExtArgs>>): Prisma__GameCreatedClient<$Result.GetResult<Prisma.$GameCreatedPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GameCreated.
     * @param {GameCreatedUpdateArgs} args - Arguments to update one GameCreated.
     * @example
     * // Update one GameCreated
     * const gameCreated = await prisma.gameCreated.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameCreatedUpdateArgs>(args: SelectSubset<T, GameCreatedUpdateArgs<ExtArgs>>): Prisma__GameCreatedClient<$Result.GetResult<Prisma.$GameCreatedPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GameCreateds.
     * @param {GameCreatedDeleteManyArgs} args - Arguments to filter GameCreateds to delete.
     * @example
     * // Delete a few GameCreateds
     * const { count } = await prisma.gameCreated.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameCreatedDeleteManyArgs>(args?: SelectSubset<T, GameCreatedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameCreateds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCreatedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameCreateds
     * const gameCreated = await prisma.gameCreated.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameCreatedUpdateManyArgs>(args: SelectSubset<T, GameCreatedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GameCreated.
     * @param {GameCreatedUpsertArgs} args - Arguments to update or create a GameCreated.
     * @example
     * // Update or create a GameCreated
     * const gameCreated = await prisma.gameCreated.upsert({
     *   create: {
     *     // ... data to create a GameCreated
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameCreated we want to update
     *   }
     * })
     */
    upsert<T extends GameCreatedUpsertArgs>(args: SelectSubset<T, GameCreatedUpsertArgs<ExtArgs>>): Prisma__GameCreatedClient<$Result.GetResult<Prisma.$GameCreatedPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GameCreateds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCreatedCountArgs} args - Arguments to filter GameCreateds to count.
     * @example
     * // Count the number of GameCreateds
     * const count = await prisma.gameCreated.count({
     *   where: {
     *     // ... the filter for the GameCreateds we want to count
     *   }
     * })
    **/
    count<T extends GameCreatedCountArgs>(
      args?: Subset<T, GameCreatedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCreatedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameCreated.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCreatedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameCreatedAggregateArgs>(args: Subset<T, GameCreatedAggregateArgs>): Prisma.PrismaPromise<GetGameCreatedAggregateType<T>>

    /**
     * Group by GameCreated.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCreatedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameCreatedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameCreatedGroupByArgs['orderBy'] }
        : { orderBy?: GameCreatedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameCreatedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameCreatedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameCreated model
   */
  readonly fields: GameCreatedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameCreated.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameCreatedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameCreated model
   */ 
  interface GameCreatedFieldRefs {
    readonly dbId: FieldRef<"GameCreated", 'String'>
    readonly game_id: FieldRef<"GameCreated", 'String'>
    readonly name: FieldRef<"GameCreated", 'String'>
    readonly cost_in_sui: FieldRef<"GameCreated", 'String'>
    readonly end_time: FieldRef<"GameCreated", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GameCreated findUnique
   */
  export type GameCreatedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCreated
     */
    select?: GameCreatedSelect<ExtArgs> | null
    /**
     * Filter, which GameCreated to fetch.
     */
    where: GameCreatedWhereUniqueInput
  }

  /**
   * GameCreated findUniqueOrThrow
   */
  export type GameCreatedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCreated
     */
    select?: GameCreatedSelect<ExtArgs> | null
    /**
     * Filter, which GameCreated to fetch.
     */
    where: GameCreatedWhereUniqueInput
  }

  /**
   * GameCreated findFirst
   */
  export type GameCreatedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCreated
     */
    select?: GameCreatedSelect<ExtArgs> | null
    /**
     * Filter, which GameCreated to fetch.
     */
    where?: GameCreatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameCreateds to fetch.
     */
    orderBy?: GameCreatedOrderByWithRelationInput | GameCreatedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameCreateds.
     */
    cursor?: GameCreatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameCreateds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameCreateds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameCreateds.
     */
    distinct?: GameCreatedScalarFieldEnum | GameCreatedScalarFieldEnum[]
  }

  /**
   * GameCreated findFirstOrThrow
   */
  export type GameCreatedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCreated
     */
    select?: GameCreatedSelect<ExtArgs> | null
    /**
     * Filter, which GameCreated to fetch.
     */
    where?: GameCreatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameCreateds to fetch.
     */
    orderBy?: GameCreatedOrderByWithRelationInput | GameCreatedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameCreateds.
     */
    cursor?: GameCreatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameCreateds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameCreateds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameCreateds.
     */
    distinct?: GameCreatedScalarFieldEnum | GameCreatedScalarFieldEnum[]
  }

  /**
   * GameCreated findMany
   */
  export type GameCreatedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCreated
     */
    select?: GameCreatedSelect<ExtArgs> | null
    /**
     * Filter, which GameCreateds to fetch.
     */
    where?: GameCreatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameCreateds to fetch.
     */
    orderBy?: GameCreatedOrderByWithRelationInput | GameCreatedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameCreateds.
     */
    cursor?: GameCreatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameCreateds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameCreateds.
     */
    skip?: number
    distinct?: GameCreatedScalarFieldEnum | GameCreatedScalarFieldEnum[]
  }

  /**
   * GameCreated create
   */
  export type GameCreatedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCreated
     */
    select?: GameCreatedSelect<ExtArgs> | null
    /**
     * The data needed to create a GameCreated.
     */
    data: XOR<GameCreatedCreateInput, GameCreatedUncheckedCreateInput>
  }

  /**
   * GameCreated createMany
   */
  export type GameCreatedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameCreateds.
     */
    data: GameCreatedCreateManyInput | GameCreatedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameCreated createManyAndReturn
   */
  export type GameCreatedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCreated
     */
    select?: GameCreatedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GameCreateds.
     */
    data: GameCreatedCreateManyInput | GameCreatedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameCreated update
   */
  export type GameCreatedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCreated
     */
    select?: GameCreatedSelect<ExtArgs> | null
    /**
     * The data needed to update a GameCreated.
     */
    data: XOR<GameCreatedUpdateInput, GameCreatedUncheckedUpdateInput>
    /**
     * Choose, which GameCreated to update.
     */
    where: GameCreatedWhereUniqueInput
  }

  /**
   * GameCreated updateMany
   */
  export type GameCreatedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameCreateds.
     */
    data: XOR<GameCreatedUpdateManyMutationInput, GameCreatedUncheckedUpdateManyInput>
    /**
     * Filter which GameCreateds to update
     */
    where?: GameCreatedWhereInput
  }

  /**
   * GameCreated upsert
   */
  export type GameCreatedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCreated
     */
    select?: GameCreatedSelect<ExtArgs> | null
    /**
     * The filter to search for the GameCreated to update in case it exists.
     */
    where: GameCreatedWhereUniqueInput
    /**
     * In case the GameCreated found by the `where` argument doesn't exist, create a new GameCreated with this data.
     */
    create: XOR<GameCreatedCreateInput, GameCreatedUncheckedCreateInput>
    /**
     * In case the GameCreated was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameCreatedUpdateInput, GameCreatedUncheckedUpdateInput>
  }

  /**
   * GameCreated delete
   */
  export type GameCreatedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCreated
     */
    select?: GameCreatedSelect<ExtArgs> | null
    /**
     * Filter which GameCreated to delete.
     */
    where: GameCreatedWhereUniqueInput
  }

  /**
   * GameCreated deleteMany
   */
  export type GameCreatedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameCreateds to delete
     */
    where?: GameCreatedWhereInput
  }

  /**
   * GameCreated without action
   */
  export type GameCreatedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCreated
     */
    select?: GameCreatedSelect<ExtArgs> | null
  }


  /**
   * Model RewardChaimed
   */

  export type AggregateRewardChaimed = {
    _count: RewardChaimedCountAggregateOutputType | null
    _avg: RewardChaimedAvgAggregateOutputType | null
    _sum: RewardChaimedSumAggregateOutputType | null
    _min: RewardChaimedMinAggregateOutputType | null
    _max: RewardChaimedMaxAggregateOutputType | null
  }

  export type RewardChaimedAvgAggregateOutputType = {
    participant_index: number | null
  }

  export type RewardChaimedSumAggregateOutputType = {
    participant_index: number | null
  }

  export type RewardChaimedMinAggregateOutputType = {
    dbId: string | null
    game_id: string | null
    participant_index: number | null
    reward: string | null
  }

  export type RewardChaimedMaxAggregateOutputType = {
    dbId: string | null
    game_id: string | null
    participant_index: number | null
    reward: string | null
  }

  export type RewardChaimedCountAggregateOutputType = {
    dbId: number
    game_id: number
    participant_index: number
    reward: number
    _all: number
  }


  export type RewardChaimedAvgAggregateInputType = {
    participant_index?: true
  }

  export type RewardChaimedSumAggregateInputType = {
    participant_index?: true
  }

  export type RewardChaimedMinAggregateInputType = {
    dbId?: true
    game_id?: true
    participant_index?: true
    reward?: true
  }

  export type RewardChaimedMaxAggregateInputType = {
    dbId?: true
    game_id?: true
    participant_index?: true
    reward?: true
  }

  export type RewardChaimedCountAggregateInputType = {
    dbId?: true
    game_id?: true
    participant_index?: true
    reward?: true
    _all?: true
  }

  export type RewardChaimedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RewardChaimed to aggregate.
     */
    where?: RewardChaimedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RewardChaimeds to fetch.
     */
    orderBy?: RewardChaimedOrderByWithRelationInput | RewardChaimedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RewardChaimedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RewardChaimeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RewardChaimeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RewardChaimeds
    **/
    _count?: true | RewardChaimedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RewardChaimedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RewardChaimedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RewardChaimedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RewardChaimedMaxAggregateInputType
  }

  export type GetRewardChaimedAggregateType<T extends RewardChaimedAggregateArgs> = {
        [P in keyof T & keyof AggregateRewardChaimed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRewardChaimed[P]>
      : GetScalarType<T[P], AggregateRewardChaimed[P]>
  }




  export type RewardChaimedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardChaimedWhereInput
    orderBy?: RewardChaimedOrderByWithAggregationInput | RewardChaimedOrderByWithAggregationInput[]
    by: RewardChaimedScalarFieldEnum[] | RewardChaimedScalarFieldEnum
    having?: RewardChaimedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RewardChaimedCountAggregateInputType | true
    _avg?: RewardChaimedAvgAggregateInputType
    _sum?: RewardChaimedSumAggregateInputType
    _min?: RewardChaimedMinAggregateInputType
    _max?: RewardChaimedMaxAggregateInputType
  }

  export type RewardChaimedGroupByOutputType = {
    dbId: string
    game_id: string
    participant_index: number
    reward: string
    _count: RewardChaimedCountAggregateOutputType | null
    _avg: RewardChaimedAvgAggregateOutputType | null
    _sum: RewardChaimedSumAggregateOutputType | null
    _min: RewardChaimedMinAggregateOutputType | null
    _max: RewardChaimedMaxAggregateOutputType | null
  }

  type GetRewardChaimedGroupByPayload<T extends RewardChaimedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RewardChaimedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RewardChaimedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RewardChaimedGroupByOutputType[P]>
            : GetScalarType<T[P], RewardChaimedGroupByOutputType[P]>
        }
      >
    >


  export type RewardChaimedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dbId?: boolean
    game_id?: boolean
    participant_index?: boolean
    reward?: boolean
  }, ExtArgs["result"]["rewardChaimed"]>

  export type RewardChaimedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dbId?: boolean
    game_id?: boolean
    participant_index?: boolean
    reward?: boolean
  }, ExtArgs["result"]["rewardChaimed"]>

  export type RewardChaimedSelectScalar = {
    dbId?: boolean
    game_id?: boolean
    participant_index?: boolean
    reward?: boolean
  }


  export type $RewardChaimedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RewardChaimed"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      dbId: string
      game_id: string
      participant_index: number
      reward: string
    }, ExtArgs["result"]["rewardChaimed"]>
    composites: {}
  }

  type RewardChaimedGetPayload<S extends boolean | null | undefined | RewardChaimedDefaultArgs> = $Result.GetResult<Prisma.$RewardChaimedPayload, S>

  type RewardChaimedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RewardChaimedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RewardChaimedCountAggregateInputType | true
    }

  export interface RewardChaimedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RewardChaimed'], meta: { name: 'RewardChaimed' } }
    /**
     * Find zero or one RewardChaimed that matches the filter.
     * @param {RewardChaimedFindUniqueArgs} args - Arguments to find a RewardChaimed
     * @example
     * // Get one RewardChaimed
     * const rewardChaimed = await prisma.rewardChaimed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RewardChaimedFindUniqueArgs>(args: SelectSubset<T, RewardChaimedFindUniqueArgs<ExtArgs>>): Prisma__RewardChaimedClient<$Result.GetResult<Prisma.$RewardChaimedPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RewardChaimed that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RewardChaimedFindUniqueOrThrowArgs} args - Arguments to find a RewardChaimed
     * @example
     * // Get one RewardChaimed
     * const rewardChaimed = await prisma.rewardChaimed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RewardChaimedFindUniqueOrThrowArgs>(args: SelectSubset<T, RewardChaimedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RewardChaimedClient<$Result.GetResult<Prisma.$RewardChaimedPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RewardChaimed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardChaimedFindFirstArgs} args - Arguments to find a RewardChaimed
     * @example
     * // Get one RewardChaimed
     * const rewardChaimed = await prisma.rewardChaimed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RewardChaimedFindFirstArgs>(args?: SelectSubset<T, RewardChaimedFindFirstArgs<ExtArgs>>): Prisma__RewardChaimedClient<$Result.GetResult<Prisma.$RewardChaimedPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RewardChaimed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardChaimedFindFirstOrThrowArgs} args - Arguments to find a RewardChaimed
     * @example
     * // Get one RewardChaimed
     * const rewardChaimed = await prisma.rewardChaimed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RewardChaimedFindFirstOrThrowArgs>(args?: SelectSubset<T, RewardChaimedFindFirstOrThrowArgs<ExtArgs>>): Prisma__RewardChaimedClient<$Result.GetResult<Prisma.$RewardChaimedPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RewardChaimeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardChaimedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RewardChaimeds
     * const rewardChaimeds = await prisma.rewardChaimed.findMany()
     * 
     * // Get first 10 RewardChaimeds
     * const rewardChaimeds = await prisma.rewardChaimed.findMany({ take: 10 })
     * 
     * // Only select the `dbId`
     * const rewardChaimedWithDbIdOnly = await prisma.rewardChaimed.findMany({ select: { dbId: true } })
     * 
     */
    findMany<T extends RewardChaimedFindManyArgs>(args?: SelectSubset<T, RewardChaimedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardChaimedPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RewardChaimed.
     * @param {RewardChaimedCreateArgs} args - Arguments to create a RewardChaimed.
     * @example
     * // Create one RewardChaimed
     * const RewardChaimed = await prisma.rewardChaimed.create({
     *   data: {
     *     // ... data to create a RewardChaimed
     *   }
     * })
     * 
     */
    create<T extends RewardChaimedCreateArgs>(args: SelectSubset<T, RewardChaimedCreateArgs<ExtArgs>>): Prisma__RewardChaimedClient<$Result.GetResult<Prisma.$RewardChaimedPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RewardChaimeds.
     * @param {RewardChaimedCreateManyArgs} args - Arguments to create many RewardChaimeds.
     * @example
     * // Create many RewardChaimeds
     * const rewardChaimed = await prisma.rewardChaimed.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RewardChaimedCreateManyArgs>(args?: SelectSubset<T, RewardChaimedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RewardChaimeds and returns the data saved in the database.
     * @param {RewardChaimedCreateManyAndReturnArgs} args - Arguments to create many RewardChaimeds.
     * @example
     * // Create many RewardChaimeds
     * const rewardChaimed = await prisma.rewardChaimed.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RewardChaimeds and only return the `dbId`
     * const rewardChaimedWithDbIdOnly = await prisma.rewardChaimed.createManyAndReturn({ 
     *   select: { dbId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RewardChaimedCreateManyAndReturnArgs>(args?: SelectSubset<T, RewardChaimedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardChaimedPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RewardChaimed.
     * @param {RewardChaimedDeleteArgs} args - Arguments to delete one RewardChaimed.
     * @example
     * // Delete one RewardChaimed
     * const RewardChaimed = await prisma.rewardChaimed.delete({
     *   where: {
     *     // ... filter to delete one RewardChaimed
     *   }
     * })
     * 
     */
    delete<T extends RewardChaimedDeleteArgs>(args: SelectSubset<T, RewardChaimedDeleteArgs<ExtArgs>>): Prisma__RewardChaimedClient<$Result.GetResult<Prisma.$RewardChaimedPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RewardChaimed.
     * @param {RewardChaimedUpdateArgs} args - Arguments to update one RewardChaimed.
     * @example
     * // Update one RewardChaimed
     * const rewardChaimed = await prisma.rewardChaimed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RewardChaimedUpdateArgs>(args: SelectSubset<T, RewardChaimedUpdateArgs<ExtArgs>>): Prisma__RewardChaimedClient<$Result.GetResult<Prisma.$RewardChaimedPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RewardChaimeds.
     * @param {RewardChaimedDeleteManyArgs} args - Arguments to filter RewardChaimeds to delete.
     * @example
     * // Delete a few RewardChaimeds
     * const { count } = await prisma.rewardChaimed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RewardChaimedDeleteManyArgs>(args?: SelectSubset<T, RewardChaimedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RewardChaimeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardChaimedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RewardChaimeds
     * const rewardChaimed = await prisma.rewardChaimed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RewardChaimedUpdateManyArgs>(args: SelectSubset<T, RewardChaimedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RewardChaimed.
     * @param {RewardChaimedUpsertArgs} args - Arguments to update or create a RewardChaimed.
     * @example
     * // Update or create a RewardChaimed
     * const rewardChaimed = await prisma.rewardChaimed.upsert({
     *   create: {
     *     // ... data to create a RewardChaimed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RewardChaimed we want to update
     *   }
     * })
     */
    upsert<T extends RewardChaimedUpsertArgs>(args: SelectSubset<T, RewardChaimedUpsertArgs<ExtArgs>>): Prisma__RewardChaimedClient<$Result.GetResult<Prisma.$RewardChaimedPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RewardChaimeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardChaimedCountArgs} args - Arguments to filter RewardChaimeds to count.
     * @example
     * // Count the number of RewardChaimeds
     * const count = await prisma.rewardChaimed.count({
     *   where: {
     *     // ... the filter for the RewardChaimeds we want to count
     *   }
     * })
    **/
    count<T extends RewardChaimedCountArgs>(
      args?: Subset<T, RewardChaimedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RewardChaimedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RewardChaimed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardChaimedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RewardChaimedAggregateArgs>(args: Subset<T, RewardChaimedAggregateArgs>): Prisma.PrismaPromise<GetRewardChaimedAggregateType<T>>

    /**
     * Group by RewardChaimed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardChaimedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RewardChaimedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RewardChaimedGroupByArgs['orderBy'] }
        : { orderBy?: RewardChaimedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RewardChaimedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRewardChaimedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RewardChaimed model
   */
  readonly fields: RewardChaimedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RewardChaimed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RewardChaimedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RewardChaimed model
   */ 
  interface RewardChaimedFieldRefs {
    readonly dbId: FieldRef<"RewardChaimed", 'String'>
    readonly game_id: FieldRef<"RewardChaimed", 'String'>
    readonly participant_index: FieldRef<"RewardChaimed", 'Int'>
    readonly reward: FieldRef<"RewardChaimed", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RewardChaimed findUnique
   */
  export type RewardChaimedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardChaimed
     */
    select?: RewardChaimedSelect<ExtArgs> | null
    /**
     * Filter, which RewardChaimed to fetch.
     */
    where: RewardChaimedWhereUniqueInput
  }

  /**
   * RewardChaimed findUniqueOrThrow
   */
  export type RewardChaimedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardChaimed
     */
    select?: RewardChaimedSelect<ExtArgs> | null
    /**
     * Filter, which RewardChaimed to fetch.
     */
    where: RewardChaimedWhereUniqueInput
  }

  /**
   * RewardChaimed findFirst
   */
  export type RewardChaimedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardChaimed
     */
    select?: RewardChaimedSelect<ExtArgs> | null
    /**
     * Filter, which RewardChaimed to fetch.
     */
    where?: RewardChaimedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RewardChaimeds to fetch.
     */
    orderBy?: RewardChaimedOrderByWithRelationInput | RewardChaimedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RewardChaimeds.
     */
    cursor?: RewardChaimedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RewardChaimeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RewardChaimeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RewardChaimeds.
     */
    distinct?: RewardChaimedScalarFieldEnum | RewardChaimedScalarFieldEnum[]
  }

  /**
   * RewardChaimed findFirstOrThrow
   */
  export type RewardChaimedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardChaimed
     */
    select?: RewardChaimedSelect<ExtArgs> | null
    /**
     * Filter, which RewardChaimed to fetch.
     */
    where?: RewardChaimedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RewardChaimeds to fetch.
     */
    orderBy?: RewardChaimedOrderByWithRelationInput | RewardChaimedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RewardChaimeds.
     */
    cursor?: RewardChaimedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RewardChaimeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RewardChaimeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RewardChaimeds.
     */
    distinct?: RewardChaimedScalarFieldEnum | RewardChaimedScalarFieldEnum[]
  }

  /**
   * RewardChaimed findMany
   */
  export type RewardChaimedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardChaimed
     */
    select?: RewardChaimedSelect<ExtArgs> | null
    /**
     * Filter, which RewardChaimeds to fetch.
     */
    where?: RewardChaimedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RewardChaimeds to fetch.
     */
    orderBy?: RewardChaimedOrderByWithRelationInput | RewardChaimedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RewardChaimeds.
     */
    cursor?: RewardChaimedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RewardChaimeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RewardChaimeds.
     */
    skip?: number
    distinct?: RewardChaimedScalarFieldEnum | RewardChaimedScalarFieldEnum[]
  }

  /**
   * RewardChaimed create
   */
  export type RewardChaimedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardChaimed
     */
    select?: RewardChaimedSelect<ExtArgs> | null
    /**
     * The data needed to create a RewardChaimed.
     */
    data: XOR<RewardChaimedCreateInput, RewardChaimedUncheckedCreateInput>
  }

  /**
   * RewardChaimed createMany
   */
  export type RewardChaimedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RewardChaimeds.
     */
    data: RewardChaimedCreateManyInput | RewardChaimedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RewardChaimed createManyAndReturn
   */
  export type RewardChaimedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardChaimed
     */
    select?: RewardChaimedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RewardChaimeds.
     */
    data: RewardChaimedCreateManyInput | RewardChaimedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RewardChaimed update
   */
  export type RewardChaimedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardChaimed
     */
    select?: RewardChaimedSelect<ExtArgs> | null
    /**
     * The data needed to update a RewardChaimed.
     */
    data: XOR<RewardChaimedUpdateInput, RewardChaimedUncheckedUpdateInput>
    /**
     * Choose, which RewardChaimed to update.
     */
    where: RewardChaimedWhereUniqueInput
  }

  /**
   * RewardChaimed updateMany
   */
  export type RewardChaimedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RewardChaimeds.
     */
    data: XOR<RewardChaimedUpdateManyMutationInput, RewardChaimedUncheckedUpdateManyInput>
    /**
     * Filter which RewardChaimeds to update
     */
    where?: RewardChaimedWhereInput
  }

  /**
   * RewardChaimed upsert
   */
  export type RewardChaimedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardChaimed
     */
    select?: RewardChaimedSelect<ExtArgs> | null
    /**
     * The filter to search for the RewardChaimed to update in case it exists.
     */
    where: RewardChaimedWhereUniqueInput
    /**
     * In case the RewardChaimed found by the `where` argument doesn't exist, create a new RewardChaimed with this data.
     */
    create: XOR<RewardChaimedCreateInput, RewardChaimedUncheckedCreateInput>
    /**
     * In case the RewardChaimed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RewardChaimedUpdateInput, RewardChaimedUncheckedUpdateInput>
  }

  /**
   * RewardChaimed delete
   */
  export type RewardChaimedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardChaimed
     */
    select?: RewardChaimedSelect<ExtArgs> | null
    /**
     * Filter which RewardChaimed to delete.
     */
    where: RewardChaimedWhereUniqueInput
  }

  /**
   * RewardChaimed deleteMany
   */
  export type RewardChaimedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RewardChaimeds to delete
     */
    where?: RewardChaimedWhereInput
  }

  /**
   * RewardChaimed without action
   */
  export type RewardChaimedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardChaimed
     */
    select?: RewardChaimedSelect<ExtArgs> | null
  }


  /**
   * Model TicketDestroyed
   */

  export type AggregateTicketDestroyed = {
    _count: TicketDestroyedCountAggregateOutputType | null
    _avg: TicketDestroyedAvgAggregateOutputType | null
    _sum: TicketDestroyedSumAggregateOutputType | null
    _min: TicketDestroyedMinAggregateOutputType | null
    _max: TicketDestroyedMaxAggregateOutputType | null
  }

  export type TicketDestroyedAvgAggregateOutputType = {
    participant_index: number | null
  }

  export type TicketDestroyedSumAggregateOutputType = {
    participant_index: number | null
  }

  export type TicketDestroyedMinAggregateOutputType = {
    dbId: string | null
    game_id: string | null
    participant_index: number | null
  }

  export type TicketDestroyedMaxAggregateOutputType = {
    dbId: string | null
    game_id: string | null
    participant_index: number | null
  }

  export type TicketDestroyedCountAggregateOutputType = {
    dbId: number
    game_id: number
    participant_index: number
    _all: number
  }


  export type TicketDestroyedAvgAggregateInputType = {
    participant_index?: true
  }

  export type TicketDestroyedSumAggregateInputType = {
    participant_index?: true
  }

  export type TicketDestroyedMinAggregateInputType = {
    dbId?: true
    game_id?: true
    participant_index?: true
  }

  export type TicketDestroyedMaxAggregateInputType = {
    dbId?: true
    game_id?: true
    participant_index?: true
  }

  export type TicketDestroyedCountAggregateInputType = {
    dbId?: true
    game_id?: true
    participant_index?: true
    _all?: true
  }

  export type TicketDestroyedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketDestroyed to aggregate.
     */
    where?: TicketDestroyedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketDestroyeds to fetch.
     */
    orderBy?: TicketDestroyedOrderByWithRelationInput | TicketDestroyedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketDestroyedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketDestroyeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketDestroyeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TicketDestroyeds
    **/
    _count?: true | TicketDestroyedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketDestroyedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketDestroyedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketDestroyedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketDestroyedMaxAggregateInputType
  }

  export type GetTicketDestroyedAggregateType<T extends TicketDestroyedAggregateArgs> = {
        [P in keyof T & keyof AggregateTicketDestroyed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicketDestroyed[P]>
      : GetScalarType<T[P], AggregateTicketDestroyed[P]>
  }




  export type TicketDestroyedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketDestroyedWhereInput
    orderBy?: TicketDestroyedOrderByWithAggregationInput | TicketDestroyedOrderByWithAggregationInput[]
    by: TicketDestroyedScalarFieldEnum[] | TicketDestroyedScalarFieldEnum
    having?: TicketDestroyedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketDestroyedCountAggregateInputType | true
    _avg?: TicketDestroyedAvgAggregateInputType
    _sum?: TicketDestroyedSumAggregateInputType
    _min?: TicketDestroyedMinAggregateInputType
    _max?: TicketDestroyedMaxAggregateInputType
  }

  export type TicketDestroyedGroupByOutputType = {
    dbId: string
    game_id: string
    participant_index: number
    _count: TicketDestroyedCountAggregateOutputType | null
    _avg: TicketDestroyedAvgAggregateOutputType | null
    _sum: TicketDestroyedSumAggregateOutputType | null
    _min: TicketDestroyedMinAggregateOutputType | null
    _max: TicketDestroyedMaxAggregateOutputType | null
  }

  type GetTicketDestroyedGroupByPayload<T extends TicketDestroyedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketDestroyedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketDestroyedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketDestroyedGroupByOutputType[P]>
            : GetScalarType<T[P], TicketDestroyedGroupByOutputType[P]>
        }
      >
    >


  export type TicketDestroyedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dbId?: boolean
    game_id?: boolean
    participant_index?: boolean
  }, ExtArgs["result"]["ticketDestroyed"]>

  export type TicketDestroyedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dbId?: boolean
    game_id?: boolean
    participant_index?: boolean
  }, ExtArgs["result"]["ticketDestroyed"]>

  export type TicketDestroyedSelectScalar = {
    dbId?: boolean
    game_id?: boolean
    participant_index?: boolean
  }


  export type $TicketDestroyedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TicketDestroyed"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      dbId: string
      game_id: string
      participant_index: number
    }, ExtArgs["result"]["ticketDestroyed"]>
    composites: {}
  }

  type TicketDestroyedGetPayload<S extends boolean | null | undefined | TicketDestroyedDefaultArgs> = $Result.GetResult<Prisma.$TicketDestroyedPayload, S>

  type TicketDestroyedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TicketDestroyedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketDestroyedCountAggregateInputType | true
    }

  export interface TicketDestroyedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TicketDestroyed'], meta: { name: 'TicketDestroyed' } }
    /**
     * Find zero or one TicketDestroyed that matches the filter.
     * @param {TicketDestroyedFindUniqueArgs} args - Arguments to find a TicketDestroyed
     * @example
     * // Get one TicketDestroyed
     * const ticketDestroyed = await prisma.ticketDestroyed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketDestroyedFindUniqueArgs>(args: SelectSubset<T, TicketDestroyedFindUniqueArgs<ExtArgs>>): Prisma__TicketDestroyedClient<$Result.GetResult<Prisma.$TicketDestroyedPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TicketDestroyed that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TicketDestroyedFindUniqueOrThrowArgs} args - Arguments to find a TicketDestroyed
     * @example
     * // Get one TicketDestroyed
     * const ticketDestroyed = await prisma.ticketDestroyed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketDestroyedFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketDestroyedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketDestroyedClient<$Result.GetResult<Prisma.$TicketDestroyedPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TicketDestroyed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketDestroyedFindFirstArgs} args - Arguments to find a TicketDestroyed
     * @example
     * // Get one TicketDestroyed
     * const ticketDestroyed = await prisma.ticketDestroyed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketDestroyedFindFirstArgs>(args?: SelectSubset<T, TicketDestroyedFindFirstArgs<ExtArgs>>): Prisma__TicketDestroyedClient<$Result.GetResult<Prisma.$TicketDestroyedPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TicketDestroyed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketDestroyedFindFirstOrThrowArgs} args - Arguments to find a TicketDestroyed
     * @example
     * // Get one TicketDestroyed
     * const ticketDestroyed = await prisma.ticketDestroyed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketDestroyedFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketDestroyedFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketDestroyedClient<$Result.GetResult<Prisma.$TicketDestroyedPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TicketDestroyeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketDestroyedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TicketDestroyeds
     * const ticketDestroyeds = await prisma.ticketDestroyed.findMany()
     * 
     * // Get first 10 TicketDestroyeds
     * const ticketDestroyeds = await prisma.ticketDestroyed.findMany({ take: 10 })
     * 
     * // Only select the `dbId`
     * const ticketDestroyedWithDbIdOnly = await prisma.ticketDestroyed.findMany({ select: { dbId: true } })
     * 
     */
    findMany<T extends TicketDestroyedFindManyArgs>(args?: SelectSubset<T, TicketDestroyedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketDestroyedPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TicketDestroyed.
     * @param {TicketDestroyedCreateArgs} args - Arguments to create a TicketDestroyed.
     * @example
     * // Create one TicketDestroyed
     * const TicketDestroyed = await prisma.ticketDestroyed.create({
     *   data: {
     *     // ... data to create a TicketDestroyed
     *   }
     * })
     * 
     */
    create<T extends TicketDestroyedCreateArgs>(args: SelectSubset<T, TicketDestroyedCreateArgs<ExtArgs>>): Prisma__TicketDestroyedClient<$Result.GetResult<Prisma.$TicketDestroyedPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TicketDestroyeds.
     * @param {TicketDestroyedCreateManyArgs} args - Arguments to create many TicketDestroyeds.
     * @example
     * // Create many TicketDestroyeds
     * const ticketDestroyed = await prisma.ticketDestroyed.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketDestroyedCreateManyArgs>(args?: SelectSubset<T, TicketDestroyedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TicketDestroyeds and returns the data saved in the database.
     * @param {TicketDestroyedCreateManyAndReturnArgs} args - Arguments to create many TicketDestroyeds.
     * @example
     * // Create many TicketDestroyeds
     * const ticketDestroyed = await prisma.ticketDestroyed.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TicketDestroyeds and only return the `dbId`
     * const ticketDestroyedWithDbIdOnly = await prisma.ticketDestroyed.createManyAndReturn({ 
     *   select: { dbId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TicketDestroyedCreateManyAndReturnArgs>(args?: SelectSubset<T, TicketDestroyedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketDestroyedPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TicketDestroyed.
     * @param {TicketDestroyedDeleteArgs} args - Arguments to delete one TicketDestroyed.
     * @example
     * // Delete one TicketDestroyed
     * const TicketDestroyed = await prisma.ticketDestroyed.delete({
     *   where: {
     *     // ... filter to delete one TicketDestroyed
     *   }
     * })
     * 
     */
    delete<T extends TicketDestroyedDeleteArgs>(args: SelectSubset<T, TicketDestroyedDeleteArgs<ExtArgs>>): Prisma__TicketDestroyedClient<$Result.GetResult<Prisma.$TicketDestroyedPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TicketDestroyed.
     * @param {TicketDestroyedUpdateArgs} args - Arguments to update one TicketDestroyed.
     * @example
     * // Update one TicketDestroyed
     * const ticketDestroyed = await prisma.ticketDestroyed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketDestroyedUpdateArgs>(args: SelectSubset<T, TicketDestroyedUpdateArgs<ExtArgs>>): Prisma__TicketDestroyedClient<$Result.GetResult<Prisma.$TicketDestroyedPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TicketDestroyeds.
     * @param {TicketDestroyedDeleteManyArgs} args - Arguments to filter TicketDestroyeds to delete.
     * @example
     * // Delete a few TicketDestroyeds
     * const { count } = await prisma.ticketDestroyed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketDestroyedDeleteManyArgs>(args?: SelectSubset<T, TicketDestroyedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TicketDestroyeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketDestroyedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TicketDestroyeds
     * const ticketDestroyed = await prisma.ticketDestroyed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketDestroyedUpdateManyArgs>(args: SelectSubset<T, TicketDestroyedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TicketDestroyed.
     * @param {TicketDestroyedUpsertArgs} args - Arguments to update or create a TicketDestroyed.
     * @example
     * // Update or create a TicketDestroyed
     * const ticketDestroyed = await prisma.ticketDestroyed.upsert({
     *   create: {
     *     // ... data to create a TicketDestroyed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TicketDestroyed we want to update
     *   }
     * })
     */
    upsert<T extends TicketDestroyedUpsertArgs>(args: SelectSubset<T, TicketDestroyedUpsertArgs<ExtArgs>>): Prisma__TicketDestroyedClient<$Result.GetResult<Prisma.$TicketDestroyedPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TicketDestroyeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketDestroyedCountArgs} args - Arguments to filter TicketDestroyeds to count.
     * @example
     * // Count the number of TicketDestroyeds
     * const count = await prisma.ticketDestroyed.count({
     *   where: {
     *     // ... the filter for the TicketDestroyeds we want to count
     *   }
     * })
    **/
    count<T extends TicketDestroyedCountArgs>(
      args?: Subset<T, TicketDestroyedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketDestroyedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TicketDestroyed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketDestroyedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketDestroyedAggregateArgs>(args: Subset<T, TicketDestroyedAggregateArgs>): Prisma.PrismaPromise<GetTicketDestroyedAggregateType<T>>

    /**
     * Group by TicketDestroyed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketDestroyedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketDestroyedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketDestroyedGroupByArgs['orderBy'] }
        : { orderBy?: TicketDestroyedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketDestroyedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketDestroyedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TicketDestroyed model
   */
  readonly fields: TicketDestroyedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TicketDestroyed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketDestroyedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TicketDestroyed model
   */ 
  interface TicketDestroyedFieldRefs {
    readonly dbId: FieldRef<"TicketDestroyed", 'String'>
    readonly game_id: FieldRef<"TicketDestroyed", 'String'>
    readonly participant_index: FieldRef<"TicketDestroyed", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TicketDestroyed findUnique
   */
  export type TicketDestroyedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketDestroyed
     */
    select?: TicketDestroyedSelect<ExtArgs> | null
    /**
     * Filter, which TicketDestroyed to fetch.
     */
    where: TicketDestroyedWhereUniqueInput
  }

  /**
   * TicketDestroyed findUniqueOrThrow
   */
  export type TicketDestroyedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketDestroyed
     */
    select?: TicketDestroyedSelect<ExtArgs> | null
    /**
     * Filter, which TicketDestroyed to fetch.
     */
    where: TicketDestroyedWhereUniqueInput
  }

  /**
   * TicketDestroyed findFirst
   */
  export type TicketDestroyedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketDestroyed
     */
    select?: TicketDestroyedSelect<ExtArgs> | null
    /**
     * Filter, which TicketDestroyed to fetch.
     */
    where?: TicketDestroyedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketDestroyeds to fetch.
     */
    orderBy?: TicketDestroyedOrderByWithRelationInput | TicketDestroyedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketDestroyeds.
     */
    cursor?: TicketDestroyedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketDestroyeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketDestroyeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketDestroyeds.
     */
    distinct?: TicketDestroyedScalarFieldEnum | TicketDestroyedScalarFieldEnum[]
  }

  /**
   * TicketDestroyed findFirstOrThrow
   */
  export type TicketDestroyedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketDestroyed
     */
    select?: TicketDestroyedSelect<ExtArgs> | null
    /**
     * Filter, which TicketDestroyed to fetch.
     */
    where?: TicketDestroyedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketDestroyeds to fetch.
     */
    orderBy?: TicketDestroyedOrderByWithRelationInput | TicketDestroyedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketDestroyeds.
     */
    cursor?: TicketDestroyedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketDestroyeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketDestroyeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketDestroyeds.
     */
    distinct?: TicketDestroyedScalarFieldEnum | TicketDestroyedScalarFieldEnum[]
  }

  /**
   * TicketDestroyed findMany
   */
  export type TicketDestroyedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketDestroyed
     */
    select?: TicketDestroyedSelect<ExtArgs> | null
    /**
     * Filter, which TicketDestroyeds to fetch.
     */
    where?: TicketDestroyedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketDestroyeds to fetch.
     */
    orderBy?: TicketDestroyedOrderByWithRelationInput | TicketDestroyedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TicketDestroyeds.
     */
    cursor?: TicketDestroyedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketDestroyeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketDestroyeds.
     */
    skip?: number
    distinct?: TicketDestroyedScalarFieldEnum | TicketDestroyedScalarFieldEnum[]
  }

  /**
   * TicketDestroyed create
   */
  export type TicketDestroyedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketDestroyed
     */
    select?: TicketDestroyedSelect<ExtArgs> | null
    /**
     * The data needed to create a TicketDestroyed.
     */
    data: XOR<TicketDestroyedCreateInput, TicketDestroyedUncheckedCreateInput>
  }

  /**
   * TicketDestroyed createMany
   */
  export type TicketDestroyedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TicketDestroyeds.
     */
    data: TicketDestroyedCreateManyInput | TicketDestroyedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TicketDestroyed createManyAndReturn
   */
  export type TicketDestroyedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketDestroyed
     */
    select?: TicketDestroyedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TicketDestroyeds.
     */
    data: TicketDestroyedCreateManyInput | TicketDestroyedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TicketDestroyed update
   */
  export type TicketDestroyedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketDestroyed
     */
    select?: TicketDestroyedSelect<ExtArgs> | null
    /**
     * The data needed to update a TicketDestroyed.
     */
    data: XOR<TicketDestroyedUpdateInput, TicketDestroyedUncheckedUpdateInput>
    /**
     * Choose, which TicketDestroyed to update.
     */
    where: TicketDestroyedWhereUniqueInput
  }

  /**
   * TicketDestroyed updateMany
   */
  export type TicketDestroyedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TicketDestroyeds.
     */
    data: XOR<TicketDestroyedUpdateManyMutationInput, TicketDestroyedUncheckedUpdateManyInput>
    /**
     * Filter which TicketDestroyeds to update
     */
    where?: TicketDestroyedWhereInput
  }

  /**
   * TicketDestroyed upsert
   */
  export type TicketDestroyedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketDestroyed
     */
    select?: TicketDestroyedSelect<ExtArgs> | null
    /**
     * The filter to search for the TicketDestroyed to update in case it exists.
     */
    where: TicketDestroyedWhereUniqueInput
    /**
     * In case the TicketDestroyed found by the `where` argument doesn't exist, create a new TicketDestroyed with this data.
     */
    create: XOR<TicketDestroyedCreateInput, TicketDestroyedUncheckedCreateInput>
    /**
     * In case the TicketDestroyed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketDestroyedUpdateInput, TicketDestroyedUncheckedUpdateInput>
  }

  /**
   * TicketDestroyed delete
   */
  export type TicketDestroyedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketDestroyed
     */
    select?: TicketDestroyedSelect<ExtArgs> | null
    /**
     * Filter which TicketDestroyed to delete.
     */
    where: TicketDestroyedWhereUniqueInput
  }

  /**
   * TicketDestroyed deleteMany
   */
  export type TicketDestroyedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketDestroyeds to delete
     */
    where?: TicketDestroyedWhereInput
  }

  /**
   * TicketDestroyed without action
   */
  export type TicketDestroyedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketDestroyed
     */
    select?: TicketDestroyedSelect<ExtArgs> | null
  }


  /**
   * Model TicketPurchase
   */

  export type AggregateTicketPurchase = {
    _count: TicketPurchaseCountAggregateOutputType | null
    _avg: TicketPurchaseAvgAggregateOutputType | null
    _sum: TicketPurchaseSumAggregateOutputType | null
    _min: TicketPurchaseMinAggregateOutputType | null
    _max: TicketPurchaseMaxAggregateOutputType | null
  }

  export type TicketPurchaseAvgAggregateOutputType = {
    participant_index: number | null
  }

  export type TicketPurchaseSumAggregateOutputType = {
    participant_index: number | null
  }

  export type TicketPurchaseMinAggregateOutputType = {
    dbId: string | null
    game_id: string | null
    game_name: string | null
    participant_index: number | null
    end_time: string | null
  }

  export type TicketPurchaseMaxAggregateOutputType = {
    dbId: string | null
    game_id: string | null
    game_name: string | null
    participant_index: number | null
    end_time: string | null
  }

  export type TicketPurchaseCountAggregateOutputType = {
    dbId: number
    game_id: number
    game_name: number
    participant_index: number
    end_time: number
    _all: number
  }


  export type TicketPurchaseAvgAggregateInputType = {
    participant_index?: true
  }

  export type TicketPurchaseSumAggregateInputType = {
    participant_index?: true
  }

  export type TicketPurchaseMinAggregateInputType = {
    dbId?: true
    game_id?: true
    game_name?: true
    participant_index?: true
    end_time?: true
  }

  export type TicketPurchaseMaxAggregateInputType = {
    dbId?: true
    game_id?: true
    game_name?: true
    participant_index?: true
    end_time?: true
  }

  export type TicketPurchaseCountAggregateInputType = {
    dbId?: true
    game_id?: true
    game_name?: true
    participant_index?: true
    end_time?: true
    _all?: true
  }

  export type TicketPurchaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketPurchase to aggregate.
     */
    where?: TicketPurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketPurchases to fetch.
     */
    orderBy?: TicketPurchaseOrderByWithRelationInput | TicketPurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketPurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketPurchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketPurchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TicketPurchases
    **/
    _count?: true | TicketPurchaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketPurchaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketPurchaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketPurchaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketPurchaseMaxAggregateInputType
  }

  export type GetTicketPurchaseAggregateType<T extends TicketPurchaseAggregateArgs> = {
        [P in keyof T & keyof AggregateTicketPurchase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicketPurchase[P]>
      : GetScalarType<T[P], AggregateTicketPurchase[P]>
  }




  export type TicketPurchaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketPurchaseWhereInput
    orderBy?: TicketPurchaseOrderByWithAggregationInput | TicketPurchaseOrderByWithAggregationInput[]
    by: TicketPurchaseScalarFieldEnum[] | TicketPurchaseScalarFieldEnum
    having?: TicketPurchaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketPurchaseCountAggregateInputType | true
    _avg?: TicketPurchaseAvgAggregateInputType
    _sum?: TicketPurchaseSumAggregateInputType
    _min?: TicketPurchaseMinAggregateInputType
    _max?: TicketPurchaseMaxAggregateInputType
  }

  export type TicketPurchaseGroupByOutputType = {
    dbId: string
    game_id: string
    game_name: string
    participant_index: number
    end_time: string
    _count: TicketPurchaseCountAggregateOutputType | null
    _avg: TicketPurchaseAvgAggregateOutputType | null
    _sum: TicketPurchaseSumAggregateOutputType | null
    _min: TicketPurchaseMinAggregateOutputType | null
    _max: TicketPurchaseMaxAggregateOutputType | null
  }

  type GetTicketPurchaseGroupByPayload<T extends TicketPurchaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketPurchaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketPurchaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketPurchaseGroupByOutputType[P]>
            : GetScalarType<T[P], TicketPurchaseGroupByOutputType[P]>
        }
      >
    >


  export type TicketPurchaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dbId?: boolean
    game_id?: boolean
    game_name?: boolean
    participant_index?: boolean
    end_time?: boolean
  }, ExtArgs["result"]["ticketPurchase"]>

  export type TicketPurchaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dbId?: boolean
    game_id?: boolean
    game_name?: boolean
    participant_index?: boolean
    end_time?: boolean
  }, ExtArgs["result"]["ticketPurchase"]>

  export type TicketPurchaseSelectScalar = {
    dbId?: boolean
    game_id?: boolean
    game_name?: boolean
    participant_index?: boolean
    end_time?: boolean
  }


  export type $TicketPurchasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TicketPurchase"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      dbId: string
      game_id: string
      game_name: string
      participant_index: number
      end_time: string
    }, ExtArgs["result"]["ticketPurchase"]>
    composites: {}
  }

  type TicketPurchaseGetPayload<S extends boolean | null | undefined | TicketPurchaseDefaultArgs> = $Result.GetResult<Prisma.$TicketPurchasePayload, S>

  type TicketPurchaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TicketPurchaseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketPurchaseCountAggregateInputType | true
    }

  export interface TicketPurchaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TicketPurchase'], meta: { name: 'TicketPurchase' } }
    /**
     * Find zero or one TicketPurchase that matches the filter.
     * @param {TicketPurchaseFindUniqueArgs} args - Arguments to find a TicketPurchase
     * @example
     * // Get one TicketPurchase
     * const ticketPurchase = await prisma.ticketPurchase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketPurchaseFindUniqueArgs>(args: SelectSubset<T, TicketPurchaseFindUniqueArgs<ExtArgs>>): Prisma__TicketPurchaseClient<$Result.GetResult<Prisma.$TicketPurchasePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TicketPurchase that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TicketPurchaseFindUniqueOrThrowArgs} args - Arguments to find a TicketPurchase
     * @example
     * // Get one TicketPurchase
     * const ticketPurchase = await prisma.ticketPurchase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketPurchaseFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketPurchaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketPurchaseClient<$Result.GetResult<Prisma.$TicketPurchasePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TicketPurchase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketPurchaseFindFirstArgs} args - Arguments to find a TicketPurchase
     * @example
     * // Get one TicketPurchase
     * const ticketPurchase = await prisma.ticketPurchase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketPurchaseFindFirstArgs>(args?: SelectSubset<T, TicketPurchaseFindFirstArgs<ExtArgs>>): Prisma__TicketPurchaseClient<$Result.GetResult<Prisma.$TicketPurchasePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TicketPurchase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketPurchaseFindFirstOrThrowArgs} args - Arguments to find a TicketPurchase
     * @example
     * // Get one TicketPurchase
     * const ticketPurchase = await prisma.ticketPurchase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketPurchaseFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketPurchaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketPurchaseClient<$Result.GetResult<Prisma.$TicketPurchasePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TicketPurchases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketPurchaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TicketPurchases
     * const ticketPurchases = await prisma.ticketPurchase.findMany()
     * 
     * // Get first 10 TicketPurchases
     * const ticketPurchases = await prisma.ticketPurchase.findMany({ take: 10 })
     * 
     * // Only select the `dbId`
     * const ticketPurchaseWithDbIdOnly = await prisma.ticketPurchase.findMany({ select: { dbId: true } })
     * 
     */
    findMany<T extends TicketPurchaseFindManyArgs>(args?: SelectSubset<T, TicketPurchaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPurchasePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TicketPurchase.
     * @param {TicketPurchaseCreateArgs} args - Arguments to create a TicketPurchase.
     * @example
     * // Create one TicketPurchase
     * const TicketPurchase = await prisma.ticketPurchase.create({
     *   data: {
     *     // ... data to create a TicketPurchase
     *   }
     * })
     * 
     */
    create<T extends TicketPurchaseCreateArgs>(args: SelectSubset<T, TicketPurchaseCreateArgs<ExtArgs>>): Prisma__TicketPurchaseClient<$Result.GetResult<Prisma.$TicketPurchasePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TicketPurchases.
     * @param {TicketPurchaseCreateManyArgs} args - Arguments to create many TicketPurchases.
     * @example
     * // Create many TicketPurchases
     * const ticketPurchase = await prisma.ticketPurchase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketPurchaseCreateManyArgs>(args?: SelectSubset<T, TicketPurchaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TicketPurchases and returns the data saved in the database.
     * @param {TicketPurchaseCreateManyAndReturnArgs} args - Arguments to create many TicketPurchases.
     * @example
     * // Create many TicketPurchases
     * const ticketPurchase = await prisma.ticketPurchase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TicketPurchases and only return the `dbId`
     * const ticketPurchaseWithDbIdOnly = await prisma.ticketPurchase.createManyAndReturn({ 
     *   select: { dbId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TicketPurchaseCreateManyAndReturnArgs>(args?: SelectSubset<T, TicketPurchaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPurchasePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TicketPurchase.
     * @param {TicketPurchaseDeleteArgs} args - Arguments to delete one TicketPurchase.
     * @example
     * // Delete one TicketPurchase
     * const TicketPurchase = await prisma.ticketPurchase.delete({
     *   where: {
     *     // ... filter to delete one TicketPurchase
     *   }
     * })
     * 
     */
    delete<T extends TicketPurchaseDeleteArgs>(args: SelectSubset<T, TicketPurchaseDeleteArgs<ExtArgs>>): Prisma__TicketPurchaseClient<$Result.GetResult<Prisma.$TicketPurchasePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TicketPurchase.
     * @param {TicketPurchaseUpdateArgs} args - Arguments to update one TicketPurchase.
     * @example
     * // Update one TicketPurchase
     * const ticketPurchase = await prisma.ticketPurchase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketPurchaseUpdateArgs>(args: SelectSubset<T, TicketPurchaseUpdateArgs<ExtArgs>>): Prisma__TicketPurchaseClient<$Result.GetResult<Prisma.$TicketPurchasePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TicketPurchases.
     * @param {TicketPurchaseDeleteManyArgs} args - Arguments to filter TicketPurchases to delete.
     * @example
     * // Delete a few TicketPurchases
     * const { count } = await prisma.ticketPurchase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketPurchaseDeleteManyArgs>(args?: SelectSubset<T, TicketPurchaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TicketPurchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketPurchaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TicketPurchases
     * const ticketPurchase = await prisma.ticketPurchase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketPurchaseUpdateManyArgs>(args: SelectSubset<T, TicketPurchaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TicketPurchase.
     * @param {TicketPurchaseUpsertArgs} args - Arguments to update or create a TicketPurchase.
     * @example
     * // Update or create a TicketPurchase
     * const ticketPurchase = await prisma.ticketPurchase.upsert({
     *   create: {
     *     // ... data to create a TicketPurchase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TicketPurchase we want to update
     *   }
     * })
     */
    upsert<T extends TicketPurchaseUpsertArgs>(args: SelectSubset<T, TicketPurchaseUpsertArgs<ExtArgs>>): Prisma__TicketPurchaseClient<$Result.GetResult<Prisma.$TicketPurchasePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TicketPurchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketPurchaseCountArgs} args - Arguments to filter TicketPurchases to count.
     * @example
     * // Count the number of TicketPurchases
     * const count = await prisma.ticketPurchase.count({
     *   where: {
     *     // ... the filter for the TicketPurchases we want to count
     *   }
     * })
    **/
    count<T extends TicketPurchaseCountArgs>(
      args?: Subset<T, TicketPurchaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketPurchaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TicketPurchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketPurchaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketPurchaseAggregateArgs>(args: Subset<T, TicketPurchaseAggregateArgs>): Prisma.PrismaPromise<GetTicketPurchaseAggregateType<T>>

    /**
     * Group by TicketPurchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketPurchaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketPurchaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketPurchaseGroupByArgs['orderBy'] }
        : { orderBy?: TicketPurchaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketPurchaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketPurchaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TicketPurchase model
   */
  readonly fields: TicketPurchaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TicketPurchase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketPurchaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TicketPurchase model
   */ 
  interface TicketPurchaseFieldRefs {
    readonly dbId: FieldRef<"TicketPurchase", 'String'>
    readonly game_id: FieldRef<"TicketPurchase", 'String'>
    readonly game_name: FieldRef<"TicketPurchase", 'String'>
    readonly participant_index: FieldRef<"TicketPurchase", 'Int'>
    readonly end_time: FieldRef<"TicketPurchase", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TicketPurchase findUnique
   */
  export type TicketPurchaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketPurchase
     */
    select?: TicketPurchaseSelect<ExtArgs> | null
    /**
     * Filter, which TicketPurchase to fetch.
     */
    where: TicketPurchaseWhereUniqueInput
  }

  /**
   * TicketPurchase findUniqueOrThrow
   */
  export type TicketPurchaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketPurchase
     */
    select?: TicketPurchaseSelect<ExtArgs> | null
    /**
     * Filter, which TicketPurchase to fetch.
     */
    where: TicketPurchaseWhereUniqueInput
  }

  /**
   * TicketPurchase findFirst
   */
  export type TicketPurchaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketPurchase
     */
    select?: TicketPurchaseSelect<ExtArgs> | null
    /**
     * Filter, which TicketPurchase to fetch.
     */
    where?: TicketPurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketPurchases to fetch.
     */
    orderBy?: TicketPurchaseOrderByWithRelationInput | TicketPurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketPurchases.
     */
    cursor?: TicketPurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketPurchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketPurchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketPurchases.
     */
    distinct?: TicketPurchaseScalarFieldEnum | TicketPurchaseScalarFieldEnum[]
  }

  /**
   * TicketPurchase findFirstOrThrow
   */
  export type TicketPurchaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketPurchase
     */
    select?: TicketPurchaseSelect<ExtArgs> | null
    /**
     * Filter, which TicketPurchase to fetch.
     */
    where?: TicketPurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketPurchases to fetch.
     */
    orderBy?: TicketPurchaseOrderByWithRelationInput | TicketPurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketPurchases.
     */
    cursor?: TicketPurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketPurchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketPurchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketPurchases.
     */
    distinct?: TicketPurchaseScalarFieldEnum | TicketPurchaseScalarFieldEnum[]
  }

  /**
   * TicketPurchase findMany
   */
  export type TicketPurchaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketPurchase
     */
    select?: TicketPurchaseSelect<ExtArgs> | null
    /**
     * Filter, which TicketPurchases to fetch.
     */
    where?: TicketPurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketPurchases to fetch.
     */
    orderBy?: TicketPurchaseOrderByWithRelationInput | TicketPurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TicketPurchases.
     */
    cursor?: TicketPurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketPurchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketPurchases.
     */
    skip?: number
    distinct?: TicketPurchaseScalarFieldEnum | TicketPurchaseScalarFieldEnum[]
  }

  /**
   * TicketPurchase create
   */
  export type TicketPurchaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketPurchase
     */
    select?: TicketPurchaseSelect<ExtArgs> | null
    /**
     * The data needed to create a TicketPurchase.
     */
    data: XOR<TicketPurchaseCreateInput, TicketPurchaseUncheckedCreateInput>
  }

  /**
   * TicketPurchase createMany
   */
  export type TicketPurchaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TicketPurchases.
     */
    data: TicketPurchaseCreateManyInput | TicketPurchaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TicketPurchase createManyAndReturn
   */
  export type TicketPurchaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketPurchase
     */
    select?: TicketPurchaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TicketPurchases.
     */
    data: TicketPurchaseCreateManyInput | TicketPurchaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TicketPurchase update
   */
  export type TicketPurchaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketPurchase
     */
    select?: TicketPurchaseSelect<ExtArgs> | null
    /**
     * The data needed to update a TicketPurchase.
     */
    data: XOR<TicketPurchaseUpdateInput, TicketPurchaseUncheckedUpdateInput>
    /**
     * Choose, which TicketPurchase to update.
     */
    where: TicketPurchaseWhereUniqueInput
  }

  /**
   * TicketPurchase updateMany
   */
  export type TicketPurchaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TicketPurchases.
     */
    data: XOR<TicketPurchaseUpdateManyMutationInput, TicketPurchaseUncheckedUpdateManyInput>
    /**
     * Filter which TicketPurchases to update
     */
    where?: TicketPurchaseWhereInput
  }

  /**
   * TicketPurchase upsert
   */
  export type TicketPurchaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketPurchase
     */
    select?: TicketPurchaseSelect<ExtArgs> | null
    /**
     * The filter to search for the TicketPurchase to update in case it exists.
     */
    where: TicketPurchaseWhereUniqueInput
    /**
     * In case the TicketPurchase found by the `where` argument doesn't exist, create a new TicketPurchase with this data.
     */
    create: XOR<TicketPurchaseCreateInput, TicketPurchaseUncheckedCreateInput>
    /**
     * In case the TicketPurchase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketPurchaseUpdateInput, TicketPurchaseUncheckedUpdateInput>
  }

  /**
   * TicketPurchase delete
   */
  export type TicketPurchaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketPurchase
     */
    select?: TicketPurchaseSelect<ExtArgs> | null
    /**
     * Filter which TicketPurchase to delete.
     */
    where: TicketPurchaseWhereUniqueInput
  }

  /**
   * TicketPurchase deleteMany
   */
  export type TicketPurchaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketPurchases to delete
     */
    where?: TicketPurchaseWhereInput
  }

  /**
   * TicketPurchase without action
   */
  export type TicketPurchaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketPurchase
     */
    select?: TicketPurchaseSelect<ExtArgs> | null
  }


  /**
   * Model WinnerDetermined
   */

  export type AggregateWinnerDetermined = {
    _count: WinnerDeterminedCountAggregateOutputType | null
    _avg: WinnerDeterminedAvgAggregateOutputType | null
    _sum: WinnerDeterminedSumAggregateOutputType | null
    _min: WinnerDeterminedMinAggregateOutputType | null
    _max: WinnerDeterminedMaxAggregateOutputType | null
  }

  export type WinnerDeterminedAvgAggregateOutputType = {
    participant_index: number | null
  }

  export type WinnerDeterminedSumAggregateOutputType = {
    participant_index: number | null
  }

  export type WinnerDeterminedMinAggregateOutputType = {
    dbId: string | null
    game_id: string | null
    participant_index: number | null
  }

  export type WinnerDeterminedMaxAggregateOutputType = {
    dbId: string | null
    game_id: string | null
    participant_index: number | null
  }

  export type WinnerDeterminedCountAggregateOutputType = {
    dbId: number
    game_id: number
    participant_index: number
    _all: number
  }


  export type WinnerDeterminedAvgAggregateInputType = {
    participant_index?: true
  }

  export type WinnerDeterminedSumAggregateInputType = {
    participant_index?: true
  }

  export type WinnerDeterminedMinAggregateInputType = {
    dbId?: true
    game_id?: true
    participant_index?: true
  }

  export type WinnerDeterminedMaxAggregateInputType = {
    dbId?: true
    game_id?: true
    participant_index?: true
  }

  export type WinnerDeterminedCountAggregateInputType = {
    dbId?: true
    game_id?: true
    participant_index?: true
    _all?: true
  }

  export type WinnerDeterminedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WinnerDetermined to aggregate.
     */
    where?: WinnerDeterminedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WinnerDetermineds to fetch.
     */
    orderBy?: WinnerDeterminedOrderByWithRelationInput | WinnerDeterminedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WinnerDeterminedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WinnerDetermineds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WinnerDetermineds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WinnerDetermineds
    **/
    _count?: true | WinnerDeterminedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WinnerDeterminedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WinnerDeterminedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WinnerDeterminedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WinnerDeterminedMaxAggregateInputType
  }

  export type GetWinnerDeterminedAggregateType<T extends WinnerDeterminedAggregateArgs> = {
        [P in keyof T & keyof AggregateWinnerDetermined]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWinnerDetermined[P]>
      : GetScalarType<T[P], AggregateWinnerDetermined[P]>
  }




  export type WinnerDeterminedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WinnerDeterminedWhereInput
    orderBy?: WinnerDeterminedOrderByWithAggregationInput | WinnerDeterminedOrderByWithAggregationInput[]
    by: WinnerDeterminedScalarFieldEnum[] | WinnerDeterminedScalarFieldEnum
    having?: WinnerDeterminedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WinnerDeterminedCountAggregateInputType | true
    _avg?: WinnerDeterminedAvgAggregateInputType
    _sum?: WinnerDeterminedSumAggregateInputType
    _min?: WinnerDeterminedMinAggregateInputType
    _max?: WinnerDeterminedMaxAggregateInputType
  }

  export type WinnerDeterminedGroupByOutputType = {
    dbId: string
    game_id: string
    participant_index: number
    _count: WinnerDeterminedCountAggregateOutputType | null
    _avg: WinnerDeterminedAvgAggregateOutputType | null
    _sum: WinnerDeterminedSumAggregateOutputType | null
    _min: WinnerDeterminedMinAggregateOutputType | null
    _max: WinnerDeterminedMaxAggregateOutputType | null
  }

  type GetWinnerDeterminedGroupByPayload<T extends WinnerDeterminedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WinnerDeterminedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WinnerDeterminedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WinnerDeterminedGroupByOutputType[P]>
            : GetScalarType<T[P], WinnerDeterminedGroupByOutputType[P]>
        }
      >
    >


  export type WinnerDeterminedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dbId?: boolean
    game_id?: boolean
    participant_index?: boolean
  }, ExtArgs["result"]["winnerDetermined"]>

  export type WinnerDeterminedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dbId?: boolean
    game_id?: boolean
    participant_index?: boolean
  }, ExtArgs["result"]["winnerDetermined"]>

  export type WinnerDeterminedSelectScalar = {
    dbId?: boolean
    game_id?: boolean
    participant_index?: boolean
  }


  export type $WinnerDeterminedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WinnerDetermined"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      dbId: string
      game_id: string
      participant_index: number
    }, ExtArgs["result"]["winnerDetermined"]>
    composites: {}
  }

  type WinnerDeterminedGetPayload<S extends boolean | null | undefined | WinnerDeterminedDefaultArgs> = $Result.GetResult<Prisma.$WinnerDeterminedPayload, S>

  type WinnerDeterminedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WinnerDeterminedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WinnerDeterminedCountAggregateInputType | true
    }

  export interface WinnerDeterminedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WinnerDetermined'], meta: { name: 'WinnerDetermined' } }
    /**
     * Find zero or one WinnerDetermined that matches the filter.
     * @param {WinnerDeterminedFindUniqueArgs} args - Arguments to find a WinnerDetermined
     * @example
     * // Get one WinnerDetermined
     * const winnerDetermined = await prisma.winnerDetermined.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WinnerDeterminedFindUniqueArgs>(args: SelectSubset<T, WinnerDeterminedFindUniqueArgs<ExtArgs>>): Prisma__WinnerDeterminedClient<$Result.GetResult<Prisma.$WinnerDeterminedPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WinnerDetermined that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WinnerDeterminedFindUniqueOrThrowArgs} args - Arguments to find a WinnerDetermined
     * @example
     * // Get one WinnerDetermined
     * const winnerDetermined = await prisma.winnerDetermined.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WinnerDeterminedFindUniqueOrThrowArgs>(args: SelectSubset<T, WinnerDeterminedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WinnerDeterminedClient<$Result.GetResult<Prisma.$WinnerDeterminedPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WinnerDetermined that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerDeterminedFindFirstArgs} args - Arguments to find a WinnerDetermined
     * @example
     * // Get one WinnerDetermined
     * const winnerDetermined = await prisma.winnerDetermined.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WinnerDeterminedFindFirstArgs>(args?: SelectSubset<T, WinnerDeterminedFindFirstArgs<ExtArgs>>): Prisma__WinnerDeterminedClient<$Result.GetResult<Prisma.$WinnerDeterminedPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WinnerDetermined that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerDeterminedFindFirstOrThrowArgs} args - Arguments to find a WinnerDetermined
     * @example
     * // Get one WinnerDetermined
     * const winnerDetermined = await prisma.winnerDetermined.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WinnerDeterminedFindFirstOrThrowArgs>(args?: SelectSubset<T, WinnerDeterminedFindFirstOrThrowArgs<ExtArgs>>): Prisma__WinnerDeterminedClient<$Result.GetResult<Prisma.$WinnerDeterminedPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WinnerDetermineds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerDeterminedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WinnerDetermineds
     * const winnerDetermineds = await prisma.winnerDetermined.findMany()
     * 
     * // Get first 10 WinnerDetermineds
     * const winnerDetermineds = await prisma.winnerDetermined.findMany({ take: 10 })
     * 
     * // Only select the `dbId`
     * const winnerDeterminedWithDbIdOnly = await prisma.winnerDetermined.findMany({ select: { dbId: true } })
     * 
     */
    findMany<T extends WinnerDeterminedFindManyArgs>(args?: SelectSubset<T, WinnerDeterminedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinnerDeterminedPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WinnerDetermined.
     * @param {WinnerDeterminedCreateArgs} args - Arguments to create a WinnerDetermined.
     * @example
     * // Create one WinnerDetermined
     * const WinnerDetermined = await prisma.winnerDetermined.create({
     *   data: {
     *     // ... data to create a WinnerDetermined
     *   }
     * })
     * 
     */
    create<T extends WinnerDeterminedCreateArgs>(args: SelectSubset<T, WinnerDeterminedCreateArgs<ExtArgs>>): Prisma__WinnerDeterminedClient<$Result.GetResult<Prisma.$WinnerDeterminedPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WinnerDetermineds.
     * @param {WinnerDeterminedCreateManyArgs} args - Arguments to create many WinnerDetermineds.
     * @example
     * // Create many WinnerDetermineds
     * const winnerDetermined = await prisma.winnerDetermined.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WinnerDeterminedCreateManyArgs>(args?: SelectSubset<T, WinnerDeterminedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WinnerDetermineds and returns the data saved in the database.
     * @param {WinnerDeterminedCreateManyAndReturnArgs} args - Arguments to create many WinnerDetermineds.
     * @example
     * // Create many WinnerDetermineds
     * const winnerDetermined = await prisma.winnerDetermined.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WinnerDetermineds and only return the `dbId`
     * const winnerDeterminedWithDbIdOnly = await prisma.winnerDetermined.createManyAndReturn({ 
     *   select: { dbId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WinnerDeterminedCreateManyAndReturnArgs>(args?: SelectSubset<T, WinnerDeterminedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinnerDeterminedPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WinnerDetermined.
     * @param {WinnerDeterminedDeleteArgs} args - Arguments to delete one WinnerDetermined.
     * @example
     * // Delete one WinnerDetermined
     * const WinnerDetermined = await prisma.winnerDetermined.delete({
     *   where: {
     *     // ... filter to delete one WinnerDetermined
     *   }
     * })
     * 
     */
    delete<T extends WinnerDeterminedDeleteArgs>(args: SelectSubset<T, WinnerDeterminedDeleteArgs<ExtArgs>>): Prisma__WinnerDeterminedClient<$Result.GetResult<Prisma.$WinnerDeterminedPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WinnerDetermined.
     * @param {WinnerDeterminedUpdateArgs} args - Arguments to update one WinnerDetermined.
     * @example
     * // Update one WinnerDetermined
     * const winnerDetermined = await prisma.winnerDetermined.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WinnerDeterminedUpdateArgs>(args: SelectSubset<T, WinnerDeterminedUpdateArgs<ExtArgs>>): Prisma__WinnerDeterminedClient<$Result.GetResult<Prisma.$WinnerDeterminedPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WinnerDetermineds.
     * @param {WinnerDeterminedDeleteManyArgs} args - Arguments to filter WinnerDetermineds to delete.
     * @example
     * // Delete a few WinnerDetermineds
     * const { count } = await prisma.winnerDetermined.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WinnerDeterminedDeleteManyArgs>(args?: SelectSubset<T, WinnerDeterminedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WinnerDetermineds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerDeterminedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WinnerDetermineds
     * const winnerDetermined = await prisma.winnerDetermined.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WinnerDeterminedUpdateManyArgs>(args: SelectSubset<T, WinnerDeterminedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WinnerDetermined.
     * @param {WinnerDeterminedUpsertArgs} args - Arguments to update or create a WinnerDetermined.
     * @example
     * // Update or create a WinnerDetermined
     * const winnerDetermined = await prisma.winnerDetermined.upsert({
     *   create: {
     *     // ... data to create a WinnerDetermined
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WinnerDetermined we want to update
     *   }
     * })
     */
    upsert<T extends WinnerDeterminedUpsertArgs>(args: SelectSubset<T, WinnerDeterminedUpsertArgs<ExtArgs>>): Prisma__WinnerDeterminedClient<$Result.GetResult<Prisma.$WinnerDeterminedPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WinnerDetermineds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerDeterminedCountArgs} args - Arguments to filter WinnerDetermineds to count.
     * @example
     * // Count the number of WinnerDetermineds
     * const count = await prisma.winnerDetermined.count({
     *   where: {
     *     // ... the filter for the WinnerDetermineds we want to count
     *   }
     * })
    **/
    count<T extends WinnerDeterminedCountArgs>(
      args?: Subset<T, WinnerDeterminedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WinnerDeterminedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WinnerDetermined.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerDeterminedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WinnerDeterminedAggregateArgs>(args: Subset<T, WinnerDeterminedAggregateArgs>): Prisma.PrismaPromise<GetWinnerDeterminedAggregateType<T>>

    /**
     * Group by WinnerDetermined.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerDeterminedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WinnerDeterminedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WinnerDeterminedGroupByArgs['orderBy'] }
        : { orderBy?: WinnerDeterminedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WinnerDeterminedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWinnerDeterminedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WinnerDetermined model
   */
  readonly fields: WinnerDeterminedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WinnerDetermined.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WinnerDeterminedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WinnerDetermined model
   */ 
  interface WinnerDeterminedFieldRefs {
    readonly dbId: FieldRef<"WinnerDetermined", 'String'>
    readonly game_id: FieldRef<"WinnerDetermined", 'String'>
    readonly participant_index: FieldRef<"WinnerDetermined", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WinnerDetermined findUnique
   */
  export type WinnerDeterminedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WinnerDetermined
     */
    select?: WinnerDeterminedSelect<ExtArgs> | null
    /**
     * Filter, which WinnerDetermined to fetch.
     */
    where: WinnerDeterminedWhereUniqueInput
  }

  /**
   * WinnerDetermined findUniqueOrThrow
   */
  export type WinnerDeterminedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WinnerDetermined
     */
    select?: WinnerDeterminedSelect<ExtArgs> | null
    /**
     * Filter, which WinnerDetermined to fetch.
     */
    where: WinnerDeterminedWhereUniqueInput
  }

  /**
   * WinnerDetermined findFirst
   */
  export type WinnerDeterminedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WinnerDetermined
     */
    select?: WinnerDeterminedSelect<ExtArgs> | null
    /**
     * Filter, which WinnerDetermined to fetch.
     */
    where?: WinnerDeterminedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WinnerDetermineds to fetch.
     */
    orderBy?: WinnerDeterminedOrderByWithRelationInput | WinnerDeterminedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WinnerDetermineds.
     */
    cursor?: WinnerDeterminedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WinnerDetermineds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WinnerDetermineds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WinnerDetermineds.
     */
    distinct?: WinnerDeterminedScalarFieldEnum | WinnerDeterminedScalarFieldEnum[]
  }

  /**
   * WinnerDetermined findFirstOrThrow
   */
  export type WinnerDeterminedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WinnerDetermined
     */
    select?: WinnerDeterminedSelect<ExtArgs> | null
    /**
     * Filter, which WinnerDetermined to fetch.
     */
    where?: WinnerDeterminedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WinnerDetermineds to fetch.
     */
    orderBy?: WinnerDeterminedOrderByWithRelationInput | WinnerDeterminedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WinnerDetermineds.
     */
    cursor?: WinnerDeterminedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WinnerDetermineds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WinnerDetermineds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WinnerDetermineds.
     */
    distinct?: WinnerDeterminedScalarFieldEnum | WinnerDeterminedScalarFieldEnum[]
  }

  /**
   * WinnerDetermined findMany
   */
  export type WinnerDeterminedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WinnerDetermined
     */
    select?: WinnerDeterminedSelect<ExtArgs> | null
    /**
     * Filter, which WinnerDetermineds to fetch.
     */
    where?: WinnerDeterminedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WinnerDetermineds to fetch.
     */
    orderBy?: WinnerDeterminedOrderByWithRelationInput | WinnerDeterminedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WinnerDetermineds.
     */
    cursor?: WinnerDeterminedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WinnerDetermineds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WinnerDetermineds.
     */
    skip?: number
    distinct?: WinnerDeterminedScalarFieldEnum | WinnerDeterminedScalarFieldEnum[]
  }

  /**
   * WinnerDetermined create
   */
  export type WinnerDeterminedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WinnerDetermined
     */
    select?: WinnerDeterminedSelect<ExtArgs> | null
    /**
     * The data needed to create a WinnerDetermined.
     */
    data: XOR<WinnerDeterminedCreateInput, WinnerDeterminedUncheckedCreateInput>
  }

  /**
   * WinnerDetermined createMany
   */
  export type WinnerDeterminedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WinnerDetermineds.
     */
    data: WinnerDeterminedCreateManyInput | WinnerDeterminedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WinnerDetermined createManyAndReturn
   */
  export type WinnerDeterminedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WinnerDetermined
     */
    select?: WinnerDeterminedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WinnerDetermineds.
     */
    data: WinnerDeterminedCreateManyInput | WinnerDeterminedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WinnerDetermined update
   */
  export type WinnerDeterminedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WinnerDetermined
     */
    select?: WinnerDeterminedSelect<ExtArgs> | null
    /**
     * The data needed to update a WinnerDetermined.
     */
    data: XOR<WinnerDeterminedUpdateInput, WinnerDeterminedUncheckedUpdateInput>
    /**
     * Choose, which WinnerDetermined to update.
     */
    where: WinnerDeterminedWhereUniqueInput
  }

  /**
   * WinnerDetermined updateMany
   */
  export type WinnerDeterminedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WinnerDetermineds.
     */
    data: XOR<WinnerDeterminedUpdateManyMutationInput, WinnerDeterminedUncheckedUpdateManyInput>
    /**
     * Filter which WinnerDetermineds to update
     */
    where?: WinnerDeterminedWhereInput
  }

  /**
   * WinnerDetermined upsert
   */
  export type WinnerDeterminedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WinnerDetermined
     */
    select?: WinnerDeterminedSelect<ExtArgs> | null
    /**
     * The filter to search for the WinnerDetermined to update in case it exists.
     */
    where: WinnerDeterminedWhereUniqueInput
    /**
     * In case the WinnerDetermined found by the `where` argument doesn't exist, create a new WinnerDetermined with this data.
     */
    create: XOR<WinnerDeterminedCreateInput, WinnerDeterminedUncheckedCreateInput>
    /**
     * In case the WinnerDetermined was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WinnerDeterminedUpdateInput, WinnerDeterminedUncheckedUpdateInput>
  }

  /**
   * WinnerDetermined delete
   */
  export type WinnerDeterminedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WinnerDetermined
     */
    select?: WinnerDeterminedSelect<ExtArgs> | null
    /**
     * Filter which WinnerDetermined to delete.
     */
    where: WinnerDeterminedWhereUniqueInput
  }

  /**
   * WinnerDetermined deleteMany
   */
  export type WinnerDeterminedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WinnerDetermineds to delete
     */
    where?: WinnerDeterminedWhereInput
  }

  /**
   * WinnerDetermined without action
   */
  export type WinnerDeterminedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WinnerDetermined
     */
    select?: WinnerDeterminedSelect<ExtArgs> | null
  }


  /**
   * Model cursor
   */

  export type AggregateCursor = {
    _count: CursorCountAggregateOutputType | null
    _min: CursorMinAggregateOutputType | null
    _max: CursorMaxAggregateOutputType | null
  }

  export type CursorMinAggregateOutputType = {
    id: string | null
    eventSeq: string | null
    txDigest: string | null
  }

  export type CursorMaxAggregateOutputType = {
    id: string | null
    eventSeq: string | null
    txDigest: string | null
  }

  export type CursorCountAggregateOutputType = {
    id: number
    eventSeq: number
    txDigest: number
    _all: number
  }


  export type CursorMinAggregateInputType = {
    id?: true
    eventSeq?: true
    txDigest?: true
  }

  export type CursorMaxAggregateInputType = {
    id?: true
    eventSeq?: true
    txDigest?: true
  }

  export type CursorCountAggregateInputType = {
    id?: true
    eventSeq?: true
    txDigest?: true
    _all?: true
  }

  export type CursorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cursor to aggregate.
     */
    where?: cursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cursors to fetch.
     */
    orderBy?: cursorOrderByWithRelationInput | cursorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cursors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cursors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cursors
    **/
    _count?: true | CursorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CursorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CursorMaxAggregateInputType
  }

  export type GetCursorAggregateType<T extends CursorAggregateArgs> = {
        [P in keyof T & keyof AggregateCursor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCursor[P]>
      : GetScalarType<T[P], AggregateCursor[P]>
  }




  export type cursorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cursorWhereInput
    orderBy?: cursorOrderByWithAggregationInput | cursorOrderByWithAggregationInput[]
    by: CursorScalarFieldEnum[] | CursorScalarFieldEnum
    having?: cursorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CursorCountAggregateInputType | true
    _min?: CursorMinAggregateInputType
    _max?: CursorMaxAggregateInputType
  }

  export type CursorGroupByOutputType = {
    id: string
    eventSeq: string
    txDigest: string
    _count: CursorCountAggregateOutputType | null
    _min: CursorMinAggregateOutputType | null
    _max: CursorMaxAggregateOutputType | null
  }

  type GetCursorGroupByPayload<T extends cursorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CursorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CursorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CursorGroupByOutputType[P]>
            : GetScalarType<T[P], CursorGroupByOutputType[P]>
        }
      >
    >


  export type cursorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventSeq?: boolean
    txDigest?: boolean
  }, ExtArgs["result"]["cursor"]>

  export type cursorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventSeq?: boolean
    txDigest?: boolean
  }, ExtArgs["result"]["cursor"]>

  export type cursorSelectScalar = {
    id?: boolean
    eventSeq?: boolean
    txDigest?: boolean
  }


  export type $cursorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cursor"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventSeq: string
      txDigest: string
    }, ExtArgs["result"]["cursor"]>
    composites: {}
  }

  type cursorGetPayload<S extends boolean | null | undefined | cursorDefaultArgs> = $Result.GetResult<Prisma.$cursorPayload, S>

  type cursorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cursorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CursorCountAggregateInputType | true
    }

  export interface cursorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cursor'], meta: { name: 'cursor' } }
    /**
     * Find zero or one Cursor that matches the filter.
     * @param {cursorFindUniqueArgs} args - Arguments to find a Cursor
     * @example
     * // Get one Cursor
     * const cursor = await prisma.cursor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends cursorFindUniqueArgs>(args: SelectSubset<T, cursorFindUniqueArgs<ExtArgs>>): Prisma__cursorClient<$Result.GetResult<Prisma.$cursorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cursor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {cursorFindUniqueOrThrowArgs} args - Arguments to find a Cursor
     * @example
     * // Get one Cursor
     * const cursor = await prisma.cursor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends cursorFindUniqueOrThrowArgs>(args: SelectSubset<T, cursorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__cursorClient<$Result.GetResult<Prisma.$cursorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cursor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cursorFindFirstArgs} args - Arguments to find a Cursor
     * @example
     * // Get one Cursor
     * const cursor = await prisma.cursor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends cursorFindFirstArgs>(args?: SelectSubset<T, cursorFindFirstArgs<ExtArgs>>): Prisma__cursorClient<$Result.GetResult<Prisma.$cursorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cursor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cursorFindFirstOrThrowArgs} args - Arguments to find a Cursor
     * @example
     * // Get one Cursor
     * const cursor = await prisma.cursor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends cursorFindFirstOrThrowArgs>(args?: SelectSubset<T, cursorFindFirstOrThrowArgs<ExtArgs>>): Prisma__cursorClient<$Result.GetResult<Prisma.$cursorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cursors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cursorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cursors
     * const cursors = await prisma.cursor.findMany()
     * 
     * // Get first 10 Cursors
     * const cursors = await prisma.cursor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cursorWithIdOnly = await prisma.cursor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends cursorFindManyArgs>(args?: SelectSubset<T, cursorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cursorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cursor.
     * @param {cursorCreateArgs} args - Arguments to create a Cursor.
     * @example
     * // Create one Cursor
     * const Cursor = await prisma.cursor.create({
     *   data: {
     *     // ... data to create a Cursor
     *   }
     * })
     * 
     */
    create<T extends cursorCreateArgs>(args: SelectSubset<T, cursorCreateArgs<ExtArgs>>): Prisma__cursorClient<$Result.GetResult<Prisma.$cursorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cursors.
     * @param {cursorCreateManyArgs} args - Arguments to create many Cursors.
     * @example
     * // Create many Cursors
     * const cursor = await prisma.cursor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends cursorCreateManyArgs>(args?: SelectSubset<T, cursorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cursors and returns the data saved in the database.
     * @param {cursorCreateManyAndReturnArgs} args - Arguments to create many Cursors.
     * @example
     * // Create many Cursors
     * const cursor = await prisma.cursor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cursors and only return the `id`
     * const cursorWithIdOnly = await prisma.cursor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends cursorCreateManyAndReturnArgs>(args?: SelectSubset<T, cursorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cursorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Cursor.
     * @param {cursorDeleteArgs} args - Arguments to delete one Cursor.
     * @example
     * // Delete one Cursor
     * const Cursor = await prisma.cursor.delete({
     *   where: {
     *     // ... filter to delete one Cursor
     *   }
     * })
     * 
     */
    delete<T extends cursorDeleteArgs>(args: SelectSubset<T, cursorDeleteArgs<ExtArgs>>): Prisma__cursorClient<$Result.GetResult<Prisma.$cursorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cursor.
     * @param {cursorUpdateArgs} args - Arguments to update one Cursor.
     * @example
     * // Update one Cursor
     * const cursor = await prisma.cursor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends cursorUpdateArgs>(args: SelectSubset<T, cursorUpdateArgs<ExtArgs>>): Prisma__cursorClient<$Result.GetResult<Prisma.$cursorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cursors.
     * @param {cursorDeleteManyArgs} args - Arguments to filter Cursors to delete.
     * @example
     * // Delete a few Cursors
     * const { count } = await prisma.cursor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends cursorDeleteManyArgs>(args?: SelectSubset<T, cursorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cursors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cursorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cursors
     * const cursor = await prisma.cursor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends cursorUpdateManyArgs>(args: SelectSubset<T, cursorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cursor.
     * @param {cursorUpsertArgs} args - Arguments to update or create a Cursor.
     * @example
     * // Update or create a Cursor
     * const cursor = await prisma.cursor.upsert({
     *   create: {
     *     // ... data to create a Cursor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cursor we want to update
     *   }
     * })
     */
    upsert<T extends cursorUpsertArgs>(args: SelectSubset<T, cursorUpsertArgs<ExtArgs>>): Prisma__cursorClient<$Result.GetResult<Prisma.$cursorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cursors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cursorCountArgs} args - Arguments to filter Cursors to count.
     * @example
     * // Count the number of Cursors
     * const count = await prisma.cursor.count({
     *   where: {
     *     // ... the filter for the Cursors we want to count
     *   }
     * })
    **/
    count<T extends cursorCountArgs>(
      args?: Subset<T, cursorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CursorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cursor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CursorAggregateArgs>(args: Subset<T, CursorAggregateArgs>): Prisma.PrismaPromise<GetCursorAggregateType<T>>

    /**
     * Group by Cursor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cursorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cursorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cursorGroupByArgs['orderBy'] }
        : { orderBy?: cursorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cursorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCursorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cursor model
   */
  readonly fields: cursorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cursor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cursorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cursor model
   */ 
  interface cursorFieldRefs {
    readonly id: FieldRef<"cursor", 'String'>
    readonly eventSeq: FieldRef<"cursor", 'String'>
    readonly txDigest: FieldRef<"cursor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * cursor findUnique
   */
  export type cursorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cursor
     */
    select?: cursorSelect<ExtArgs> | null
    /**
     * Filter, which cursor to fetch.
     */
    where: cursorWhereUniqueInput
  }

  /**
   * cursor findUniqueOrThrow
   */
  export type cursorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cursor
     */
    select?: cursorSelect<ExtArgs> | null
    /**
     * Filter, which cursor to fetch.
     */
    where: cursorWhereUniqueInput
  }

  /**
   * cursor findFirst
   */
  export type cursorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cursor
     */
    select?: cursorSelect<ExtArgs> | null
    /**
     * Filter, which cursor to fetch.
     */
    where?: cursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cursors to fetch.
     */
    orderBy?: cursorOrderByWithRelationInput | cursorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cursors.
     */
    cursor?: cursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cursors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cursors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cursors.
     */
    distinct?: CursorScalarFieldEnum | CursorScalarFieldEnum[]
  }

  /**
   * cursor findFirstOrThrow
   */
  export type cursorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cursor
     */
    select?: cursorSelect<ExtArgs> | null
    /**
     * Filter, which cursor to fetch.
     */
    where?: cursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cursors to fetch.
     */
    orderBy?: cursorOrderByWithRelationInput | cursorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cursors.
     */
    cursor?: cursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cursors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cursors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cursors.
     */
    distinct?: CursorScalarFieldEnum | CursorScalarFieldEnum[]
  }

  /**
   * cursor findMany
   */
  export type cursorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cursor
     */
    select?: cursorSelect<ExtArgs> | null
    /**
     * Filter, which cursors to fetch.
     */
    where?: cursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cursors to fetch.
     */
    orderBy?: cursorOrderByWithRelationInput | cursorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cursors.
     */
    cursor?: cursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cursors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cursors.
     */
    skip?: number
    distinct?: CursorScalarFieldEnum | CursorScalarFieldEnum[]
  }

  /**
   * cursor create
   */
  export type cursorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cursor
     */
    select?: cursorSelect<ExtArgs> | null
    /**
     * The data needed to create a cursor.
     */
    data: XOR<cursorCreateInput, cursorUncheckedCreateInput>
  }

  /**
   * cursor createMany
   */
  export type cursorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cursors.
     */
    data: cursorCreateManyInput | cursorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cursor createManyAndReturn
   */
  export type cursorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cursor
     */
    select?: cursorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many cursors.
     */
    data: cursorCreateManyInput | cursorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cursor update
   */
  export type cursorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cursor
     */
    select?: cursorSelect<ExtArgs> | null
    /**
     * The data needed to update a cursor.
     */
    data: XOR<cursorUpdateInput, cursorUncheckedUpdateInput>
    /**
     * Choose, which cursor to update.
     */
    where: cursorWhereUniqueInput
  }

  /**
   * cursor updateMany
   */
  export type cursorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cursors.
     */
    data: XOR<cursorUpdateManyMutationInput, cursorUncheckedUpdateManyInput>
    /**
     * Filter which cursors to update
     */
    where?: cursorWhereInput
  }

  /**
   * cursor upsert
   */
  export type cursorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cursor
     */
    select?: cursorSelect<ExtArgs> | null
    /**
     * The filter to search for the cursor to update in case it exists.
     */
    where: cursorWhereUniqueInput
    /**
     * In case the cursor found by the `where` argument doesn't exist, create a new cursor with this data.
     */
    create: XOR<cursorCreateInput, cursorUncheckedCreateInput>
    /**
     * In case the cursor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cursorUpdateInput, cursorUncheckedUpdateInput>
  }

  /**
   * cursor delete
   */
  export type cursorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cursor
     */
    select?: cursorSelect<ExtArgs> | null
    /**
     * Filter which cursor to delete.
     */
    where: cursorWhereUniqueInput
  }

  /**
   * cursor deleteMany
   */
  export type cursorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cursors to delete
     */
    where?: cursorWhereInput
  }

  /**
   * cursor without action
   */
  export type cursorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cursor
     */
    select?: cursorSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GameCreatedScalarFieldEnum: {
    dbId: 'dbId',
    game_id: 'game_id',
    name: 'name',
    cost_in_sui: 'cost_in_sui',
    end_time: 'end_time'
  };

  export type GameCreatedScalarFieldEnum = (typeof GameCreatedScalarFieldEnum)[keyof typeof GameCreatedScalarFieldEnum]


  export const RewardChaimedScalarFieldEnum: {
    dbId: 'dbId',
    game_id: 'game_id',
    participant_index: 'participant_index',
    reward: 'reward'
  };

  export type RewardChaimedScalarFieldEnum = (typeof RewardChaimedScalarFieldEnum)[keyof typeof RewardChaimedScalarFieldEnum]


  export const TicketDestroyedScalarFieldEnum: {
    dbId: 'dbId',
    game_id: 'game_id',
    participant_index: 'participant_index'
  };

  export type TicketDestroyedScalarFieldEnum = (typeof TicketDestroyedScalarFieldEnum)[keyof typeof TicketDestroyedScalarFieldEnum]


  export const TicketPurchaseScalarFieldEnum: {
    dbId: 'dbId',
    game_id: 'game_id',
    game_name: 'game_name',
    participant_index: 'participant_index',
    end_time: 'end_time'
  };

  export type TicketPurchaseScalarFieldEnum = (typeof TicketPurchaseScalarFieldEnum)[keyof typeof TicketPurchaseScalarFieldEnum]


  export const WinnerDeterminedScalarFieldEnum: {
    dbId: 'dbId',
    game_id: 'game_id',
    participant_index: 'participant_index'
  };

  export type WinnerDeterminedScalarFieldEnum = (typeof WinnerDeterminedScalarFieldEnum)[keyof typeof WinnerDeterminedScalarFieldEnum]


  export const CursorScalarFieldEnum: {
    id: 'id',
    eventSeq: 'eventSeq',
    txDigest: 'txDigest'
  };

  export type CursorScalarFieldEnum = (typeof CursorScalarFieldEnum)[keyof typeof CursorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type GameCreatedWhereInput = {
    AND?: GameCreatedWhereInput | GameCreatedWhereInput[]
    OR?: GameCreatedWhereInput[]
    NOT?: GameCreatedWhereInput | GameCreatedWhereInput[]
    dbId?: StringFilter<"GameCreated"> | string
    game_id?: StringFilter<"GameCreated"> | string
    name?: StringFilter<"GameCreated"> | string
    cost_in_sui?: StringFilter<"GameCreated"> | string
    end_time?: StringFilter<"GameCreated"> | string
  }

  export type GameCreatedOrderByWithRelationInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    name?: SortOrder
    cost_in_sui?: SortOrder
    end_time?: SortOrder
  }

  export type GameCreatedWhereUniqueInput = Prisma.AtLeast<{
    dbId?: string
    AND?: GameCreatedWhereInput | GameCreatedWhereInput[]
    OR?: GameCreatedWhereInput[]
    NOT?: GameCreatedWhereInput | GameCreatedWhereInput[]
    game_id?: StringFilter<"GameCreated"> | string
    name?: StringFilter<"GameCreated"> | string
    cost_in_sui?: StringFilter<"GameCreated"> | string
    end_time?: StringFilter<"GameCreated"> | string
  }, "dbId" | "dbId">

  export type GameCreatedOrderByWithAggregationInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    name?: SortOrder
    cost_in_sui?: SortOrder
    end_time?: SortOrder
    _count?: GameCreatedCountOrderByAggregateInput
    _max?: GameCreatedMaxOrderByAggregateInput
    _min?: GameCreatedMinOrderByAggregateInput
  }

  export type GameCreatedScalarWhereWithAggregatesInput = {
    AND?: GameCreatedScalarWhereWithAggregatesInput | GameCreatedScalarWhereWithAggregatesInput[]
    OR?: GameCreatedScalarWhereWithAggregatesInput[]
    NOT?: GameCreatedScalarWhereWithAggregatesInput | GameCreatedScalarWhereWithAggregatesInput[]
    dbId?: StringWithAggregatesFilter<"GameCreated"> | string
    game_id?: StringWithAggregatesFilter<"GameCreated"> | string
    name?: StringWithAggregatesFilter<"GameCreated"> | string
    cost_in_sui?: StringWithAggregatesFilter<"GameCreated"> | string
    end_time?: StringWithAggregatesFilter<"GameCreated"> | string
  }

  export type RewardChaimedWhereInput = {
    AND?: RewardChaimedWhereInput | RewardChaimedWhereInput[]
    OR?: RewardChaimedWhereInput[]
    NOT?: RewardChaimedWhereInput | RewardChaimedWhereInput[]
    dbId?: StringFilter<"RewardChaimed"> | string
    game_id?: StringFilter<"RewardChaimed"> | string
    participant_index?: IntFilter<"RewardChaimed"> | number
    reward?: StringFilter<"RewardChaimed"> | string
  }

  export type RewardChaimedOrderByWithRelationInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
    reward?: SortOrder
  }

  export type RewardChaimedWhereUniqueInput = Prisma.AtLeast<{
    dbId?: string
    AND?: RewardChaimedWhereInput | RewardChaimedWhereInput[]
    OR?: RewardChaimedWhereInput[]
    NOT?: RewardChaimedWhereInput | RewardChaimedWhereInput[]
    game_id?: StringFilter<"RewardChaimed"> | string
    participant_index?: IntFilter<"RewardChaimed"> | number
    reward?: StringFilter<"RewardChaimed"> | string
  }, "dbId" | "dbId">

  export type RewardChaimedOrderByWithAggregationInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
    reward?: SortOrder
    _count?: RewardChaimedCountOrderByAggregateInput
    _avg?: RewardChaimedAvgOrderByAggregateInput
    _max?: RewardChaimedMaxOrderByAggregateInput
    _min?: RewardChaimedMinOrderByAggregateInput
    _sum?: RewardChaimedSumOrderByAggregateInput
  }

  export type RewardChaimedScalarWhereWithAggregatesInput = {
    AND?: RewardChaimedScalarWhereWithAggregatesInput | RewardChaimedScalarWhereWithAggregatesInput[]
    OR?: RewardChaimedScalarWhereWithAggregatesInput[]
    NOT?: RewardChaimedScalarWhereWithAggregatesInput | RewardChaimedScalarWhereWithAggregatesInput[]
    dbId?: StringWithAggregatesFilter<"RewardChaimed"> | string
    game_id?: StringWithAggregatesFilter<"RewardChaimed"> | string
    participant_index?: IntWithAggregatesFilter<"RewardChaimed"> | number
    reward?: StringWithAggregatesFilter<"RewardChaimed"> | string
  }

  export type TicketDestroyedWhereInput = {
    AND?: TicketDestroyedWhereInput | TicketDestroyedWhereInput[]
    OR?: TicketDestroyedWhereInput[]
    NOT?: TicketDestroyedWhereInput | TicketDestroyedWhereInput[]
    dbId?: StringFilter<"TicketDestroyed"> | string
    game_id?: StringFilter<"TicketDestroyed"> | string
    participant_index?: IntFilter<"TicketDestroyed"> | number
  }

  export type TicketDestroyedOrderByWithRelationInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
  }

  export type TicketDestroyedWhereUniqueInput = Prisma.AtLeast<{
    dbId?: string
    AND?: TicketDestroyedWhereInput | TicketDestroyedWhereInput[]
    OR?: TicketDestroyedWhereInput[]
    NOT?: TicketDestroyedWhereInput | TicketDestroyedWhereInput[]
    game_id?: StringFilter<"TicketDestroyed"> | string
    participant_index?: IntFilter<"TicketDestroyed"> | number
  }, "dbId" | "dbId">

  export type TicketDestroyedOrderByWithAggregationInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
    _count?: TicketDestroyedCountOrderByAggregateInput
    _avg?: TicketDestroyedAvgOrderByAggregateInput
    _max?: TicketDestroyedMaxOrderByAggregateInput
    _min?: TicketDestroyedMinOrderByAggregateInput
    _sum?: TicketDestroyedSumOrderByAggregateInput
  }

  export type TicketDestroyedScalarWhereWithAggregatesInput = {
    AND?: TicketDestroyedScalarWhereWithAggregatesInput | TicketDestroyedScalarWhereWithAggregatesInput[]
    OR?: TicketDestroyedScalarWhereWithAggregatesInput[]
    NOT?: TicketDestroyedScalarWhereWithAggregatesInput | TicketDestroyedScalarWhereWithAggregatesInput[]
    dbId?: StringWithAggregatesFilter<"TicketDestroyed"> | string
    game_id?: StringWithAggregatesFilter<"TicketDestroyed"> | string
    participant_index?: IntWithAggregatesFilter<"TicketDestroyed"> | number
  }

  export type TicketPurchaseWhereInput = {
    AND?: TicketPurchaseWhereInput | TicketPurchaseWhereInput[]
    OR?: TicketPurchaseWhereInput[]
    NOT?: TicketPurchaseWhereInput | TicketPurchaseWhereInput[]
    dbId?: StringFilter<"TicketPurchase"> | string
    game_id?: StringFilter<"TicketPurchase"> | string
    game_name?: StringFilter<"TicketPurchase"> | string
    participant_index?: IntFilter<"TicketPurchase"> | number
    end_time?: StringFilter<"TicketPurchase"> | string
  }

  export type TicketPurchaseOrderByWithRelationInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    game_name?: SortOrder
    participant_index?: SortOrder
    end_time?: SortOrder
  }

  export type TicketPurchaseWhereUniqueInput = Prisma.AtLeast<{
    dbId?: string
    AND?: TicketPurchaseWhereInput | TicketPurchaseWhereInput[]
    OR?: TicketPurchaseWhereInput[]
    NOT?: TicketPurchaseWhereInput | TicketPurchaseWhereInput[]
    game_id?: StringFilter<"TicketPurchase"> | string
    game_name?: StringFilter<"TicketPurchase"> | string
    participant_index?: IntFilter<"TicketPurchase"> | number
    end_time?: StringFilter<"TicketPurchase"> | string
  }, "dbId" | "dbId">

  export type TicketPurchaseOrderByWithAggregationInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    game_name?: SortOrder
    participant_index?: SortOrder
    end_time?: SortOrder
    _count?: TicketPurchaseCountOrderByAggregateInput
    _avg?: TicketPurchaseAvgOrderByAggregateInput
    _max?: TicketPurchaseMaxOrderByAggregateInput
    _min?: TicketPurchaseMinOrderByAggregateInput
    _sum?: TicketPurchaseSumOrderByAggregateInput
  }

  export type TicketPurchaseScalarWhereWithAggregatesInput = {
    AND?: TicketPurchaseScalarWhereWithAggregatesInput | TicketPurchaseScalarWhereWithAggregatesInput[]
    OR?: TicketPurchaseScalarWhereWithAggregatesInput[]
    NOT?: TicketPurchaseScalarWhereWithAggregatesInput | TicketPurchaseScalarWhereWithAggregatesInput[]
    dbId?: StringWithAggregatesFilter<"TicketPurchase"> | string
    game_id?: StringWithAggregatesFilter<"TicketPurchase"> | string
    game_name?: StringWithAggregatesFilter<"TicketPurchase"> | string
    participant_index?: IntWithAggregatesFilter<"TicketPurchase"> | number
    end_time?: StringWithAggregatesFilter<"TicketPurchase"> | string
  }

  export type WinnerDeterminedWhereInput = {
    AND?: WinnerDeterminedWhereInput | WinnerDeterminedWhereInput[]
    OR?: WinnerDeterminedWhereInput[]
    NOT?: WinnerDeterminedWhereInput | WinnerDeterminedWhereInput[]
    dbId?: StringFilter<"WinnerDetermined"> | string
    game_id?: StringFilter<"WinnerDetermined"> | string
    participant_index?: IntFilter<"WinnerDetermined"> | number
  }

  export type WinnerDeterminedOrderByWithRelationInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
  }

  export type WinnerDeterminedWhereUniqueInput = Prisma.AtLeast<{
    dbId?: string
    AND?: WinnerDeterminedWhereInput | WinnerDeterminedWhereInput[]
    OR?: WinnerDeterminedWhereInput[]
    NOT?: WinnerDeterminedWhereInput | WinnerDeterminedWhereInput[]
    game_id?: StringFilter<"WinnerDetermined"> | string
    participant_index?: IntFilter<"WinnerDetermined"> | number
  }, "dbId" | "dbId">

  export type WinnerDeterminedOrderByWithAggregationInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
    _count?: WinnerDeterminedCountOrderByAggregateInput
    _avg?: WinnerDeterminedAvgOrderByAggregateInput
    _max?: WinnerDeterminedMaxOrderByAggregateInput
    _min?: WinnerDeterminedMinOrderByAggregateInput
    _sum?: WinnerDeterminedSumOrderByAggregateInput
  }

  export type WinnerDeterminedScalarWhereWithAggregatesInput = {
    AND?: WinnerDeterminedScalarWhereWithAggregatesInput | WinnerDeterminedScalarWhereWithAggregatesInput[]
    OR?: WinnerDeterminedScalarWhereWithAggregatesInput[]
    NOT?: WinnerDeterminedScalarWhereWithAggregatesInput | WinnerDeterminedScalarWhereWithAggregatesInput[]
    dbId?: StringWithAggregatesFilter<"WinnerDetermined"> | string
    game_id?: StringWithAggregatesFilter<"WinnerDetermined"> | string
    participant_index?: IntWithAggregatesFilter<"WinnerDetermined"> | number
  }

  export type cursorWhereInput = {
    AND?: cursorWhereInput | cursorWhereInput[]
    OR?: cursorWhereInput[]
    NOT?: cursorWhereInput | cursorWhereInput[]
    id?: StringFilter<"cursor"> | string
    eventSeq?: StringFilter<"cursor"> | string
    txDigest?: StringFilter<"cursor"> | string
  }

  export type cursorOrderByWithRelationInput = {
    id?: SortOrder
    eventSeq?: SortOrder
    txDigest?: SortOrder
  }

  export type cursorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: cursorWhereInput | cursorWhereInput[]
    OR?: cursorWhereInput[]
    NOT?: cursorWhereInput | cursorWhereInput[]
    eventSeq?: StringFilter<"cursor"> | string
    txDigest?: StringFilter<"cursor"> | string
  }, "id">

  export type cursorOrderByWithAggregationInput = {
    id?: SortOrder
    eventSeq?: SortOrder
    txDigest?: SortOrder
    _count?: cursorCountOrderByAggregateInput
    _max?: cursorMaxOrderByAggregateInput
    _min?: cursorMinOrderByAggregateInput
  }

  export type cursorScalarWhereWithAggregatesInput = {
    AND?: cursorScalarWhereWithAggregatesInput | cursorScalarWhereWithAggregatesInput[]
    OR?: cursorScalarWhereWithAggregatesInput[]
    NOT?: cursorScalarWhereWithAggregatesInput | cursorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"cursor"> | string
    eventSeq?: StringWithAggregatesFilter<"cursor"> | string
    txDigest?: StringWithAggregatesFilter<"cursor"> | string
  }

  export type GameCreatedCreateInput = {
    dbId?: string
    game_id: string
    name: string
    cost_in_sui: string
    end_time: string
  }

  export type GameCreatedUncheckedCreateInput = {
    dbId?: string
    game_id: string
    name: string
    cost_in_sui: string
    end_time: string
  }

  export type GameCreatedUpdateInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cost_in_sui?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
  }

  export type GameCreatedUncheckedUpdateInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cost_in_sui?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
  }

  export type GameCreatedCreateManyInput = {
    dbId?: string
    game_id: string
    name: string
    cost_in_sui: string
    end_time: string
  }

  export type GameCreatedUpdateManyMutationInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cost_in_sui?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
  }

  export type GameCreatedUncheckedUpdateManyInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cost_in_sui?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
  }

  export type RewardChaimedCreateInput = {
    dbId?: string
    game_id: string
    participant_index: number
    reward: string
  }

  export type RewardChaimedUncheckedCreateInput = {
    dbId?: string
    game_id: string
    participant_index: number
    reward: string
  }

  export type RewardChaimedUpdateInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
    reward?: StringFieldUpdateOperationsInput | string
  }

  export type RewardChaimedUncheckedUpdateInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
    reward?: StringFieldUpdateOperationsInput | string
  }

  export type RewardChaimedCreateManyInput = {
    dbId?: string
    game_id: string
    participant_index: number
    reward: string
  }

  export type RewardChaimedUpdateManyMutationInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
    reward?: StringFieldUpdateOperationsInput | string
  }

  export type RewardChaimedUncheckedUpdateManyInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
    reward?: StringFieldUpdateOperationsInput | string
  }

  export type TicketDestroyedCreateInput = {
    dbId?: string
    game_id: string
    participant_index: number
  }

  export type TicketDestroyedUncheckedCreateInput = {
    dbId?: string
    game_id: string
    participant_index: number
  }

  export type TicketDestroyedUpdateInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
  }

  export type TicketDestroyedUncheckedUpdateInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
  }

  export type TicketDestroyedCreateManyInput = {
    dbId?: string
    game_id: string
    participant_index: number
  }

  export type TicketDestroyedUpdateManyMutationInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
  }

  export type TicketDestroyedUncheckedUpdateManyInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
  }

  export type TicketPurchaseCreateInput = {
    dbId?: string
    game_id: string
    game_name: string
    participant_index: number
    end_time: string
  }

  export type TicketPurchaseUncheckedCreateInput = {
    dbId?: string
    game_id: string
    game_name: string
    participant_index: number
    end_time: string
  }

  export type TicketPurchaseUpdateInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    game_name?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
    end_time?: StringFieldUpdateOperationsInput | string
  }

  export type TicketPurchaseUncheckedUpdateInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    game_name?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
    end_time?: StringFieldUpdateOperationsInput | string
  }

  export type TicketPurchaseCreateManyInput = {
    dbId?: string
    game_id: string
    game_name: string
    participant_index: number
    end_time: string
  }

  export type TicketPurchaseUpdateManyMutationInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    game_name?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
    end_time?: StringFieldUpdateOperationsInput | string
  }

  export type TicketPurchaseUncheckedUpdateManyInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    game_name?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
    end_time?: StringFieldUpdateOperationsInput | string
  }

  export type WinnerDeterminedCreateInput = {
    dbId?: string
    game_id: string
    participant_index: number
  }

  export type WinnerDeterminedUncheckedCreateInput = {
    dbId?: string
    game_id: string
    participant_index: number
  }

  export type WinnerDeterminedUpdateInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
  }

  export type WinnerDeterminedUncheckedUpdateInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
  }

  export type WinnerDeterminedCreateManyInput = {
    dbId?: string
    game_id: string
    participant_index: number
  }

  export type WinnerDeterminedUpdateManyMutationInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
  }

  export type WinnerDeterminedUncheckedUpdateManyInput = {
    dbId?: StringFieldUpdateOperationsInput | string
    game_id?: StringFieldUpdateOperationsInput | string
    participant_index?: IntFieldUpdateOperationsInput | number
  }

  export type cursorCreateInput = {
    id: string
    eventSeq: string
    txDigest: string
  }

  export type cursorUncheckedCreateInput = {
    id: string
    eventSeq: string
    txDigest: string
  }

  export type cursorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventSeq?: StringFieldUpdateOperationsInput | string
    txDigest?: StringFieldUpdateOperationsInput | string
  }

  export type cursorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventSeq?: StringFieldUpdateOperationsInput | string
    txDigest?: StringFieldUpdateOperationsInput | string
  }

  export type cursorCreateManyInput = {
    id: string
    eventSeq: string
    txDigest: string
  }

  export type cursorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventSeq?: StringFieldUpdateOperationsInput | string
    txDigest?: StringFieldUpdateOperationsInput | string
  }

  export type cursorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventSeq?: StringFieldUpdateOperationsInput | string
    txDigest?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type GameCreatedCountOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    name?: SortOrder
    cost_in_sui?: SortOrder
    end_time?: SortOrder
  }

  export type GameCreatedMaxOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    name?: SortOrder
    cost_in_sui?: SortOrder
    end_time?: SortOrder
  }

  export type GameCreatedMinOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    name?: SortOrder
    cost_in_sui?: SortOrder
    end_time?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type RewardChaimedCountOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
    reward?: SortOrder
  }

  export type RewardChaimedAvgOrderByAggregateInput = {
    participant_index?: SortOrder
  }

  export type RewardChaimedMaxOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
    reward?: SortOrder
  }

  export type RewardChaimedMinOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
    reward?: SortOrder
  }

  export type RewardChaimedSumOrderByAggregateInput = {
    participant_index?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type TicketDestroyedCountOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
  }

  export type TicketDestroyedAvgOrderByAggregateInput = {
    participant_index?: SortOrder
  }

  export type TicketDestroyedMaxOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
  }

  export type TicketDestroyedMinOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
  }

  export type TicketDestroyedSumOrderByAggregateInput = {
    participant_index?: SortOrder
  }

  export type TicketPurchaseCountOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    game_name?: SortOrder
    participant_index?: SortOrder
    end_time?: SortOrder
  }

  export type TicketPurchaseAvgOrderByAggregateInput = {
    participant_index?: SortOrder
  }

  export type TicketPurchaseMaxOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    game_name?: SortOrder
    participant_index?: SortOrder
    end_time?: SortOrder
  }

  export type TicketPurchaseMinOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    game_name?: SortOrder
    participant_index?: SortOrder
    end_time?: SortOrder
  }

  export type TicketPurchaseSumOrderByAggregateInput = {
    participant_index?: SortOrder
  }

  export type WinnerDeterminedCountOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
  }

  export type WinnerDeterminedAvgOrderByAggregateInput = {
    participant_index?: SortOrder
  }

  export type WinnerDeterminedMaxOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
  }

  export type WinnerDeterminedMinOrderByAggregateInput = {
    dbId?: SortOrder
    game_id?: SortOrder
    participant_index?: SortOrder
  }

  export type WinnerDeterminedSumOrderByAggregateInput = {
    participant_index?: SortOrder
  }

  export type cursorCountOrderByAggregateInput = {
    id?: SortOrder
    eventSeq?: SortOrder
    txDigest?: SortOrder
  }

  export type cursorMaxOrderByAggregateInput = {
    id?: SortOrder
    eventSeq?: SortOrder
    txDigest?: SortOrder
  }

  export type cursorMinOrderByAggregateInput = {
    id?: SortOrder
    eventSeq?: SortOrder
    txDigest?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use GameCreatedDefaultArgs instead
     */
    export type GameCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameCreatedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RewardChaimedDefaultArgs instead
     */
    export type RewardChaimedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RewardChaimedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketDestroyedDefaultArgs instead
     */
    export type TicketDestroyedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketDestroyedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketPurchaseDefaultArgs instead
     */
    export type TicketPurchaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketPurchaseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WinnerDeterminedDefaultArgs instead
     */
    export type WinnerDeterminedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WinnerDeterminedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cursorDefaultArgs instead
     */
    export type cursorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cursorDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}